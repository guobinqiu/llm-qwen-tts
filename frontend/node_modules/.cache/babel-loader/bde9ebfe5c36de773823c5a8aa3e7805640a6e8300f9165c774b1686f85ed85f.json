{"ast":null,"code":"import \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport \"core-js/modules/web.dom-exception.stack.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nexport default {\n  data() {\n    return {\n      textMessage: '',\n      textResponse: '',\n      audioData: null,\n      audioPlaying: false,\n      sessionID: 'sess1',\n      textSocket: null,\n      audioSocket: null,\n      audioSourceBuffer: null,\n      mediaSource: null\n    };\n  },\n  methods: {\n    // 发送文本消息\n    sendTextMessage() {\n      if (this.textMessage.trim()) {\n        this.textSocket.send(this.textMessage);\n        this.textMessage = '';\n      }\n    },\n    // 启动音频流\n    startAudioStream() {\n      this.audioPlaying = true;\n      this.audioSocket.send('start');\n    },\n    // 停止音频流\n    stopAudioStream() {\n      this.audioPlaying = false;\n      this.audioSocket.send('stop');\n      this.audioData = null;\n      // 清理掉之前的 MediaSource\n      if (this.mediaSource) {\n        this.mediaSource.endOfStream();\n        this.mediaSource = null;\n        this.audioSourceBuffer = null;\n      }\n    },\n    // 监听文本流响应\n    listenForTextResponse() {\n      this.textSocket.onmessage = event => {\n        this.textResponse = event.data;\n      };\n    },\n    // 监听音频流响应\n    listenForAudioResponse() {\n      this.audioSocket.onmessage = event => {\n        const audioBase64 = event.data;\n        this.appendAudioBuffer(audioBase64);\n      };\n    },\n    // 初始化 WebSocket 连接\n    initWebSockets() {\n      this.textSocket = new WebSocket(`ws://localhost:8080/ws/text-stream?sessionid=${this.sessionID}`);\n      this.textSocket.onopen = () => {\n        this.listenForTextResponse();\n      };\n      this.audioSocket = new WebSocket(`ws://localhost:8080/ws/audio-stream?sessionid=${this.sessionID}`);\n      this.audioSocket.onopen = () => {\n        this.listenForAudioResponse();\n      };\n    },\n    // 初始化 MediaSource 来处理音频流\n    initMediaSource() {\n      this.mediaSource = new MediaSource();\n      const audioElement = this.$refs.audioPlayer;\n      audioElement.src = URL.createObjectURL(this.mediaSource);\n      this.mediaSource.addEventListener('sourceopen', () => {\n        this.audioSourceBuffer = this.mediaSource.addSourceBuffer('audio/wav; codecs=\"pcm_s16le\"');\n      });\n    },\n    // 将接收到的音频流数据添加到缓冲区\n    appendAudioBuffer(base64Audio) {\n      if (!this.audioSourceBuffer) return;\n      const audioBytes = this.decodeBase64(base64Audio);\n      this.audioSourceBuffer.appendBuffer(audioBytes);\n    },\n    // 将 Base64 数据解码为二进制数据\n    decodeBase64(base64String) {\n      const binaryString = atob(base64String);\n      const byteArray = new Uint8Array(binaryString.length);\n      for (let i = 0; i < binaryString.length; i++) {\n        byteArray[i] = binaryString.charCodeAt(i);\n      }\n      return byteArray;\n    }\n  },\n  mounted() {\n    this.initMediaSource();\n    this.initWebSockets();\n  },\n  beforeDestroy() {\n    if (this.textSocket) {\n      this.textSocket.close();\n    }\n    if (this.audioSocket) {\n      this.audioSocket.close();\n    }\n  }\n};","map":{"version":3,"names":["data","textMessage","textResponse","audioData","audioPlaying","sessionID","textSocket","audioSocket","audioSourceBuffer","mediaSource","methods","sendTextMessage","trim","send","startAudioStream","stopAudioStream","endOfStream","listenForTextResponse","onmessage","event","listenForAudioResponse","audioBase64","appendAudioBuffer","initWebSockets","WebSocket","onopen","initMediaSource","MediaSource","audioElement","$refs","audioPlayer","src","URL","createObjectURL","addEventListener","addSourceBuffer","base64Audio","audioBytes","decodeBase64","appendBuffer","base64String","binaryString","atob","byteArray","Uint8Array","length","i","charCodeAt","mounted","beforeDestroy","close"],"sources":["src/components/ChatPage.vue"],"sourcesContent":["<template>\n  <div>\n    <!-- 输入文本消息 -->\n    <div>\n      <input v-model=\"textMessage\" @keyup.enter=\"sendTextMessage\" placeholder=\"输入消息...\" />\n      <button @click=\"sendTextMessage\">发送文本消息</button>\n    </div>\n\n    <!-- 显示文本消息 -->\n    <div v-if=\"textResponse\">\n      <h3>文本响应：</h3>\n      <p>{{ textResponse }}</p>\n    </div>\n\n    <!-- 控制音频流播放 -->\n    <div v-if=\"textResponse\">\n      <button @click=\"startAudioStream\" :disabled=\"audioPlaying\">播放音频</button>\n      <button @click=\"stopAudioStream\" :disabled=\"!audioPlaying\">停止音频</button>\n    </div>\n\n    <!-- 使用 MediaSource API 播放流音频 -->\n    <div v-if=\"audioData\">\n      <h3>音频响应：</h3>\n      <audio ref=\"audioPlayer\" controls autoplay></audio>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      textMessage: '',\n      textResponse: '',\n      audioData: null,\n      audioPlaying: false,\n      sessionID: 'sess1',\n      textSocket: null,\n      audioSocket: null,\n      audioSourceBuffer: null,\n      mediaSource: null,\n    };\n  },\n  methods: {\n    // 发送文本消息\n    sendTextMessage() {\n      if (this.textMessage.trim()) {\n        this.textSocket.send(this.textMessage);\n        this.textMessage = '';\n      }\n    },\n\n    // 启动音频流\n    startAudioStream() {\n      this.audioPlaying = true;\n      this.audioSocket.send('start');\n    },\n\n    // 停止音频流\n    stopAudioStream() {\n      this.audioPlaying = false;\n      this.audioSocket.send('stop');\n      this.audioData = null;\n      // 清理掉之前的 MediaSource\n      if (this.mediaSource) {\n        this.mediaSource.endOfStream();\n        this.mediaSource = null;\n        this.audioSourceBuffer = null;\n      }\n    },\n\n    // 监听文本流响应\n    listenForTextResponse() {\n      this.textSocket.onmessage = (event) => {\n        this.textResponse = event.data;\n      };\n    },\n\n    // 监听音频流响应\n    listenForAudioResponse() {\n      this.audioSocket.onmessage = (event) => {\n        const audioBase64 = event.data;\n        this.appendAudioBuffer(audioBase64);\n      };\n    },\n\n    // 初始化 WebSocket 连接\n    initWebSockets() {\n      this.textSocket = new WebSocket(`ws://localhost:8080/ws/text-stream?sessionid=${this.sessionID}`);\n      this.textSocket.onopen = () => {\n        this.listenForTextResponse();\n      };\n\n      this.audioSocket = new WebSocket(`ws://localhost:8080/ws/audio-stream?sessionid=${this.sessionID}`);\n      this.audioSocket.onopen = () => {\n        this.listenForAudioResponse();\n      };\n    },\n\n    // 初始化 MediaSource 来处理音频流\n    initMediaSource() {\n      this.mediaSource = new MediaSource();\n      const audioElement = this.$refs.audioPlayer;\n      audioElement.src = URL.createObjectURL(this.mediaSource);\n\n      this.mediaSource.addEventListener('sourceopen', () => {\n        this.audioSourceBuffer = this.mediaSource.addSourceBuffer('audio/wav; codecs=\"pcm_s16le\"');\n      });\n    },\n\n    // 将接收到的音频流数据添加到缓冲区\n    appendAudioBuffer(base64Audio) {\n      if (!this.audioSourceBuffer) return;\n\n      const audioBytes = this.decodeBase64(base64Audio);\n      this.audioSourceBuffer.appendBuffer(audioBytes);\n    },\n\n    // 将 Base64 数据解码为二进制数据\n    decodeBase64(base64String) {\n      const binaryString = atob(base64String);\n      const byteArray = new Uint8Array(binaryString.length);\n\n      for (let i = 0; i < binaryString.length; i++) {\n        byteArray[i] = binaryString.charCodeAt(i);\n      }\n      \n      return byteArray;\n    }\n  },\n\n  mounted() {\n    this.initMediaSource();\n    this.initWebSockets();\n  },\n\n  beforeDestroy() {\n    if (this.textSocket) {\n      this.textSocket.close();\n    }\n    if (this.audioSocket) {\n      this.audioSocket.close();\n    }\n  }\n}\n</script>\n\n<style scoped>\nh1 {\n  text-align: center;\n}\n\nbutton {\n  margin: 10px;\n  padding: 10px 20px;\n}\n\ninput {\n  padding: 10px;\n  width: 300px;\n}\n\ndiv {\n  margin: 20px;\n}\n</style>\n"],"mappings":";;;;;;;;AA6BA;EACAA,KAAA;IACA;MACAC,WAAA;MACAC,YAAA;MACAC,SAAA;MACAC,YAAA;MACAC,SAAA;MACAC,UAAA;MACAC,WAAA;MACAC,iBAAA;MACAC,WAAA;IACA;EACA;EACAC,OAAA;IACA;IACAC,gBAAA;MACA,SAAAV,WAAA,CAAAW,IAAA;QACA,KAAAN,UAAA,CAAAO,IAAA,MAAAZ,WAAA;QACA,KAAAA,WAAA;MACA;IACA;IAEA;IACAa,iBAAA;MACA,KAAAV,YAAA;MACA,KAAAG,WAAA,CAAAM,IAAA;IACA;IAEA;IACAE,gBAAA;MACA,KAAAX,YAAA;MACA,KAAAG,WAAA,CAAAM,IAAA;MACA,KAAAV,SAAA;MACA;MACA,SAAAM,WAAA;QACA,KAAAA,WAAA,CAAAO,WAAA;QACA,KAAAP,WAAA;QACA,KAAAD,iBAAA;MACA;IACA;IAEA;IACAS,sBAAA;MACA,KAAAX,UAAA,CAAAY,SAAA,GAAAC,KAAA;QACA,KAAAjB,YAAA,GAAAiB,KAAA,CAAAnB,IAAA;MACA;IACA;IAEA;IACAoB,uBAAA;MACA,KAAAb,WAAA,CAAAW,SAAA,GAAAC,KAAA;QACA,MAAAE,WAAA,GAAAF,KAAA,CAAAnB,IAAA;QACA,KAAAsB,iBAAA,CAAAD,WAAA;MACA;IACA;IAEA;IACAE,eAAA;MACA,KAAAjB,UAAA,OAAAkB,SAAA,sDAAAnB,SAAA;MACA,KAAAC,UAAA,CAAAmB,MAAA;QACA,KAAAR,qBAAA;MACA;MAEA,KAAAV,WAAA,OAAAiB,SAAA,uDAAAnB,SAAA;MACA,KAAAE,WAAA,CAAAkB,MAAA;QACA,KAAAL,sBAAA;MACA;IACA;IAEA;IACAM,gBAAA;MACA,KAAAjB,WAAA,OAAAkB,WAAA;MACA,MAAAC,YAAA,QAAAC,KAAA,CAAAC,WAAA;MACAF,YAAA,CAAAG,GAAA,GAAAC,GAAA,CAAAC,eAAA,MAAAxB,WAAA;MAEA,KAAAA,WAAA,CAAAyB,gBAAA;QACA,KAAA1B,iBAAA,QAAAC,WAAA,CAAA0B,eAAA;MACA;IACA;IAEA;IACAb,kBAAAc,WAAA;MACA,UAAA5B,iBAAA;MAEA,MAAA6B,UAAA,QAAAC,YAAA,CAAAF,WAAA;MACA,KAAA5B,iBAAA,CAAA+B,YAAA,CAAAF,UAAA;IACA;IAEA;IACAC,aAAAE,YAAA;MACA,MAAAC,YAAA,GAAAC,IAAA,CAAAF,YAAA;MACA,MAAAG,SAAA,OAAAC,UAAA,CAAAH,YAAA,CAAAI,MAAA;MAEA,SAAAC,CAAA,MAAAA,CAAA,GAAAL,YAAA,CAAAI,MAAA,EAAAC,CAAA;QACAH,SAAA,CAAAG,CAAA,IAAAL,YAAA,CAAAM,UAAA,CAAAD,CAAA;MACA;MAEA,OAAAH,SAAA;IACA;EACA;EAEAK,QAAA;IACA,KAAAtB,eAAA;IACA,KAAAH,cAAA;EACA;EAEA0B,cAAA;IACA,SAAA3C,UAAA;MACA,KAAAA,UAAA,CAAA4C,KAAA;IACA;IACA,SAAA3C,WAAA;MACA,KAAAA,WAAA,CAAA2C,KAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}