{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nexport default {\n  data() {\n    return {\n      text: '',\n      message: '',\n      messages: [],\n      sessionID: 'sess1',\n      wsText: null,\n      wsAudio: null,\n      audioCtx: null,\n      audioPlayingNodes: [],\n      userInteracted: false // 用于第一次交互激活 AudioContext\n    };\n  },\n  computed: {\n    showMessages() {\n      const all = [...this.messages];\n      if (this.message.trim()) {\n        all.push({\n          role: 'assistant',\n          content: this.message\n        });\n      }\n      return all;\n    }\n  },\n  methods: {\n    sendText() {\n      if (!this.text.trim()) return;\n      if (!this.userInteracted) {\n        this.resumeAudioContext();\n        this.userInteracted = true;\n      }\n      this.wsText.send(this.text.trim());\n      this.messages.push({\n        role: 'user',\n        content: this.text.trim()\n      });\n      this.text = '';\n    },\n    resumeAudioContext() {\n      if (this.audioCtx && this.audioCtx.state === 'suspended') {\n        this.audioCtx.resume();\n      }\n    },\n    setupTextSocket() {\n      this.wsText = new WebSocket(`ws://localhost:8080/ws/text-stream?sessionid=${this.sessionID}`);\n      this.wsText.onopen = () => {\n        console.log('文本 WebSocket 已连接');\n      };\n      this.wsText.onmessage = event => {\n        const chunk = event.data;\n        this.message += chunk;\n        if (chunk === '\\n\\n') {\n          this.messages.push({\n            role: 'assistant',\n            content: this.message\n          });\n          this.message = '';\n        }\n      };\n      this.wsText.onerror = e => {\n        console.error('文本 WebSocket 错误', e);\n      };\n      this.wsText.onclose = () => {\n        console.log('文本 WebSocket 已关闭');\n      };\n    },\n    setupAudioSocket() {\n      this.audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n      this.wsAudio = new WebSocket(`ws://localhost:8080/ws/audio-stream?sessionid=${this.sessionID}`);\n      this.wsAudio.binaryType = 'arraybuffer';\n      this.wsAudio.onopen = () => {\n        console.log('音频 WebSocket 已连接');\n      };\n      this.wsAudio.onmessage = event => {\n        if (!this.userInteracted) {\n          this.resumeAudioContext();\n          this.userInteracted = true;\n        }\n        try {\n          const arrayBuffer = event.data;\n          console.log('接收到音频数据，字节长度:', arrayBuffer.byteLength);\n\n          // 根据后端日志分析，这是16位PCM数据，采样率24000Hz\n          const pcmData = new Int16Array(arrayBuffer);\n          console.log('PCM样本数:', pcmData.length);\n\n          // 转换为Float32格式（AudioContext需要的格式）\n          const float32Data = new Float32Array(pcmData.length);\n          for (let i = 0; i < pcmData.length; i++) {\n            float32Data[i] = pcmData[i] / 32768.0; // 16位整数转浮点数\n          }\n\n          // 使用24000Hz采样率（DashScope TTS的标准采样率）\n          const sampleRate = 24000;\n          const audioBuffer = this.audioCtx.createBuffer(1, float32Data.length, sampleRate);\n          audioBuffer.getChannelData(0).set(float32Data);\n          const source = this.audioCtx.createBufferSource();\n          source.buffer = audioBuffer;\n          source.connect(this.audioCtx.destination);\n          source.onended = () => {\n            const idx = this.audioPlayingNodes.indexOf(source);\n            if (idx !== -1) this.audioPlayingNodes.splice(idx, 1);\n          };\n          this.audioPlayingNodes.push(source);\n          source.start();\n          console.log(`成功播放音频块: ${pcmData.length}样本, 时长: ${(pcmData.length / sampleRate).toFixed(2)}秒`);\n        } catch (err) {\n          console.error('播放音频数据失败:', err);\n        }\n      };\n      this.wsAudio.onerror = e => {\n        console.error('音频 WebSocket 错误', e);\n      };\n      this.wsAudio.onclose = () => {\n        console.log('音频 WebSocket 已关闭');\n        this.stopAllAudio();\n      };\n    },\n    stopAllAudio() {\n      this.audioPlayingNodes.forEach(node => {\n        try {\n          node.stop();\n        } catch (e) {\n          console.error('停止音频节点失败:', e);\n        }\n      });\n      this.audioPlayingNodes = [];\n    }\n  },\n  mounted() {\n    // 监听用户交互，保证 AudioContext 激活\n    window.addEventListener('click', () => {\n      if (!this.userInteracted) {\n        this.resumeAudioContext();\n        this.userInteracted = true;\n      }\n    }, {\n      once: true\n    });\n    this.setupTextSocket();\n    this.setupAudioSocket();\n  },\n  beforeDestroy() {\n    if (this.wsText) this.wsText.close();\n    if (this.wsAudio) this.wsAudio.close();\n    this.stopAllAudio();\n    if (this.audioCtx) this.audioCtx.close();\n  }\n};","map":{"version":3,"names":["data","text","message","messages","sessionID","wsText","wsAudio","audioCtx","audioPlayingNodes","userInteracted","computed","showMessages","all","trim","push","role","content","methods","sendText","resumeAudioContext","send","state","resume","setupTextSocket","WebSocket","onopen","console","log","onmessage","event","chunk","onerror","e","error","onclose","setupAudioSocket","window","AudioContext","webkitAudioContext","binaryType","arrayBuffer","byteLength","pcmData","Int16Array","length","float32Data","Float32Array","i","sampleRate","audioBuffer","createBuffer","getChannelData","set","source","createBufferSource","buffer","connect","destination","onended","idx","indexOf","splice","start","toFixed","err","stopAllAudio","forEach","node","stop","mounted","addEventListener","once","beforeDestroy","close"],"sources":["src/components/ChatPage.vue"],"sourcesContent":["<template>\n  <div>\n    <div>\n      <input\n        v-model=\"text\"\n        placeholder=\"输入文本，回车发送\"\n        @keyup.enter=\"sendText\"\n        style=\"width: 300px; padding: 8px\"\n      />\n      <button @click=\"sendText\">发送</button>\n    </div>\n\n    <div style=\"margin-top: 20px;\">\n      <div v-for=\"(msg, index) in showMessages\" :key=\"index\">\n        <b>{{ msg.role }}:</b> {{ msg.content }}\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      text: '',\n      message: '',\n      messages: [],\n      sessionID: 'sess1',\n      wsText: null,\n      wsAudio: null,\n      audioCtx: null,\n      audioPlayingNodes: [],\n      userInteracted: false, // 用于第一次交互激活 AudioContext\n    };\n  },\n  computed: {\n    showMessages() {\n      const all = [...this.messages];\n      if (this.message.trim()) {\n        all.push({ role: 'assistant', content: this.message });\n      }\n      return all;\n    }\n  },\n  methods: {\n    sendText() {\n      if (!this.text.trim()) return;\n\n      if (!this.userInteracted) {\n        this.resumeAudioContext();\n        this.userInteracted = true;\n      }\n\n      this.wsText.send(this.text.trim());\n      this.messages.push({ role: 'user', content: this.text.trim() });\n      this.text = '';\n    },\n    resumeAudioContext() {\n      if (this.audioCtx && this.audioCtx.state === 'suspended') {\n        this.audioCtx.resume();\n      }\n    },\n    setupTextSocket() {\n      this.wsText = new WebSocket(`ws://localhost:8080/ws/text-stream?sessionid=${this.sessionID}`);\n\n      this.wsText.onopen = () => {\n        console.log('文本 WebSocket 已连接');\n      };\n\n      this.wsText.onmessage = (event) => {\n        const chunk = event.data;\n        this.message += chunk;\n\n        if (chunk === '\\n\\n') {\n          this.messages.push({ role: 'assistant', content: this.message });\n          this.message = '';\n        }\n      };\n\n      this.wsText.onerror = (e) => {\n        console.error('文本 WebSocket 错误', e);\n      };\n\n      this.wsText.onclose = () => {\n        console.log('文本 WebSocket 已关闭');\n      };\n    },\n    setupAudioSocket() {\n      this.audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n\n      this.wsAudio = new WebSocket(`ws://localhost:8080/ws/audio-stream?sessionid=${this.sessionID}`);\n      this.wsAudio.binaryType = 'arraybuffer';\n\n      this.wsAudio.onopen = () => {\n        console.log('音频 WebSocket 已连接');\n      };\n\n      this.wsAudio.onmessage = (event) => {\n        if (!this.userInteracted) {\n          this.resumeAudioContext();\n          this.userInteracted = true;\n        }\n\n        try {\n          const arrayBuffer = event.data;\n          console.log('接收到音频数据，字节长度:', arrayBuffer.byteLength);\n          \n          // 根据后端日志分析，这是16位PCM数据，采样率24000Hz\n          const pcmData = new Int16Array(arrayBuffer);\n          console.log('PCM样本数:', pcmData.length);\n          \n          // 转换为Float32格式（AudioContext需要的格式）\n          const float32Data = new Float32Array(pcmData.length);\n          for (let i = 0; i < pcmData.length; i++) {\n            float32Data[i] = pcmData[i] / 32768.0; // 16位整数转浮点数\n          }\n          \n          // 使用24000Hz采样率（DashScope TTS的标准采样率）\n          const sampleRate = 24000;\n          \n          const audioBuffer = this.audioCtx.createBuffer(1, float32Data.length, sampleRate);\n          audioBuffer.getChannelData(0).set(float32Data);\n\n          const source = this.audioCtx.createBufferSource();\n          source.buffer = audioBuffer;\n          source.connect(this.audioCtx.destination);\n\n          source.onended = () => {\n            const idx = this.audioPlayingNodes.indexOf(source);\n            if (idx !== -1) this.audioPlayingNodes.splice(idx, 1);\n          };\n\n          this.audioPlayingNodes.push(source);\n          source.start();\n          \n          console.log(`成功播放音频块: ${pcmData.length}样本, 时长: ${(pcmData.length / sampleRate).toFixed(2)}秒`);\n          \n        } catch (err) {\n          console.error('播放音频数据失败:', err);\n        }\n      };\n\n      this.wsAudio.onerror = (e) => {\n        console.error('音频 WebSocket 错误', e);\n      };\n\n      this.wsAudio.onclose = () => {\n        console.log('音频 WebSocket 已关闭');\n        this.stopAllAudio();\n      };\n    },\n    stopAllAudio() {\n      this.audioPlayingNodes.forEach(node => {\n        try {\n          node.stop();\n        } catch (e) {\n          console.error('停止音频节点失败:', e);\n        }\n      });\n      this.audioPlayingNodes = [];\n    }\n  },\n  mounted() {\n    // 监听用户交互，保证 AudioContext 激活\n    window.addEventListener('click', () => {\n      if (!this.userInteracted) {\n        this.resumeAudioContext();\n        this.userInteracted = true;\n      }\n    }, { once: true });\n\n    this.setupTextSocket();\n    this.setupAudioSocket();\n  },\n  beforeDestroy() {\n    if (this.wsText) this.wsText.close();\n    if (this.wsAudio) this.wsAudio.close();\n    this.stopAllAudio();\n    if (this.audioCtx) this.audioCtx.close();\n  }\n};\n</script>\n\n<style scoped>\ninput {\n  margin-right: 8px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}