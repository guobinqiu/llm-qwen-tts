{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nexport default {\n  data() {\n    return {\n      text: '',\n      message: '',\n      messages: [],\n      sessionID: 'sess1',\n      wsText: null,\n      wsAudio: null,\n      audioCtx: null,\n      audioPlayingNodes: [],\n      userInteracted: false,\n      // 用于第一次交互激活 AudioContext\n      audioChunks: [],\n      // 存储原始Float32Array数据\n      audioSampleRate: 24000,\n      playbackSource: null,\n      isPlaying: false\n    };\n  },\n  computed: {\n    showMessages() {\n      const all = [...this.messages];\n      if (this.message.trim()) {\n        all.push({\n          role: 'assistant',\n          content: this.message\n        });\n      }\n      return all;\n    }\n  },\n  methods: {\n    sendText() {\n      if (!this.text.trim()) return;\n      if (!this.userInteracted) {\n        this.resumeAudioContext();\n        this.userInteracted = true;\n      }\n      this.wsText.send(this.text.trim());\n      this.messages.push({\n        role: 'user',\n        content: this.text.trim()\n      });\n      this.text = '';\n    },\n    resumeAudioContext() {\n      if (this.audioCtx && this.audioCtx.state === 'suspended') {\n        this.audioCtx.resume();\n      }\n    },\n    setupTextSocket() {\n      this.wsText = new WebSocket(`ws://localhost:8080/ws/text-stream?sessionid=${this.sessionID}`);\n      this.wsText.onopen = () => {\n        console.log('文本 WebSocket 已连接');\n      };\n      this.wsText.onmessage = event => {\n        const chunk = event.data;\n        this.message += chunk;\n        if (chunk === '\\n\\n') {\n          this.messages.push({\n            role: 'assistant',\n            content: this.message\n          });\n          this.message = '';\n        }\n      };\n      this.wsText.onerror = e => {\n        console.error('文本 WebSocket 错误', e);\n      };\n      this.wsText.onclose = () => {\n        console.log('文本 WebSocket 已关闭');\n      };\n    },\n    // 修改 setupAudioSocket 方法\n    setupAudioSocket() {\n      this.audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n      this.audioQueue = [];\n      this.currentlyPlaying = false;\n      this.wsAudio = new WebSocket(`ws://localhost:8080/ws/audio-stream?sessionid=${this.sessionID}`);\n      this.wsAudio.binaryType = 'arraybuffer';\n      this.wsAudio.onopen = () => {\n        console.log('音频 WebSocket 已连接');\n      };\n      this.wsAudio.onmessage = event => {\n        if (!this.userInteracted) {\n          this.resumeAudioContext();\n          this.userInteracted = true;\n        }\n        try {\n          const arrayBuffer = event.data;\n          const pcmData = new Int16Array(arrayBuffer);\n\n          // 转换为Float32数据\n          const float32Data = new Float32Array(pcmData.length);\n          for (let i = 0; i < pcmData.length; i++) {\n            float32Data[i] = pcmData[i] / 32768.0;\n          }\n\n          // 直接添加到块列表\n          this.audioChunks.push(float32Data);\n          console.log(`添加音频块: ${float32Data.length} 样本, 总块数: ${this.audioChunks.length}`);\n\n          // 如果这是第一块或者之前的播放已结束，开始播放\n          if (!this.isPlaying) {\n            this.startContinuousPlayback();\n          }\n        } catch (err) {\n          console.error('处理音频数据失败:', err);\n        }\n      };\n      this.wsAudio.onerror = e => {\n        console.error('音频 WebSocket 错误', e);\n      };\n      this.wsAudio.onclose = () => {\n        console.log('音频 WebSocket 已关闭');\n        this.stopAllAudio();\n      };\n    },\n    // 连续播放方法\n    startContinuousPlayback() {\n      if (this.audioChunks.length === 0 || this.isPlaying) {\n        return;\n      }\n      console.log('开始连续播放音频');\n      this.isPlaying = true;\n\n      // 将所有chunks拼接成一个大的音频buffer\n      const playNextBatch = () => {\n        if (this.audioChunks.length === 0) {\n          console.log('所有音频块播放完毕');\n          this.isPlaying = false;\n          return;\n        }\n\n        // 一次性处理所有可用的chunks\n        const allChunks = [...this.audioChunks];\n        this.audioChunks = []; // 清空chunks数组\n\n        // 计算总长度\n        let totalLength = 0;\n        allChunks.forEach(chunk => {\n          totalLength += chunk.length;\n        });\n        if (totalLength === 0) {\n          setTimeout(playNextBatch, 50); // 等待更多数据\n          return;\n        }\n\n        // 创建合并的音频数据\n        const mergedData = new Float32Array(totalLength);\n        let offset = 0;\n        allChunks.forEach(chunk => {\n          mergedData.set(chunk, offset);\n          offset += chunk.length;\n        });\n\n        // 创建AudioBuffer\n        const audioBuffer = this.audioCtx.createBuffer(1, mergedData.length, this.audioSampleRate);\n        audioBuffer.getChannelData(0).set(mergedData);\n\n        // 播放\n        const source = this.audioCtx.createBufferSource();\n        source.buffer = audioBuffer;\n        source.connect(this.audioCtx.destination);\n        source.onended = () => {\n          console.log(`播放完成一批音频: ${mergedData.length} 样本, ${audioBuffer.duration.toFixed(3)}秒`);\n          const idx = this.audioPlayingNodes.indexOf(source);\n          if (idx !== -1) {\n            this.audioPlayingNodes.splice(idx, 1);\n          }\n\n          // 继续播放下一批\n          setTimeout(playNextBatch, 10);\n        };\n        this.audioPlayingNodes.push(source);\n        source.start();\n        console.log(`播放音频批次: ${mergedData.length} 样本, ${audioBuffer.duration.toFixed(3)}秒`);\n      };\n      playNextBatch();\n    },\n    // 修改 stopAllAudio 方法\n    stopAllAudio() {\n      console.log('停止所有音频播放');\n      this.audioPlayingNodes.forEach(node => {\n        try {\n          node.stop();\n        } catch (e) {\n          console.error('停止音频节点失败:', e);\n        }\n      });\n      this.audioPlayingNodes = [];\n\n      // 重置状态\n      this.audioChunks = [];\n      this.isPlaying = false;\n      console.log('音频播放已停止，状态已重置');\n    }\n  },\n  mounted() {\n    // 监听用户交互，保证 AudioContext 激活\n    window.addEventListener('click', () => {\n      if (!this.userInteracted) {\n        this.resumeAudioContext();\n        this.userInteracted = true;\n      }\n    }, {\n      once: true\n    });\n    this.setupTextSocket();\n    this.setupAudioSocket();\n  },\n  beforeDestroy() {\n    if (this.wsText) this.wsText.close();\n    if (this.wsAudio) this.wsAudio.close();\n    this.stopAllAudio();\n    if (this.audioCtx) this.audioCtx.close();\n  }\n};","map":{"version":3,"names":["data","text","message","messages","sessionID","wsText","wsAudio","audioCtx","audioPlayingNodes","userInteracted","audioChunks","audioSampleRate","playbackSource","isPlaying","computed","showMessages","all","trim","push","role","content","methods","sendText","resumeAudioContext","send","state","resume","setupTextSocket","WebSocket","onopen","console","log","onmessage","event","chunk","onerror","e","error","onclose","setupAudioSocket","window","AudioContext","webkitAudioContext","audioQueue","currentlyPlaying","binaryType","arrayBuffer","pcmData","Int16Array","float32Data","Float32Array","length","i","startContinuousPlayback","err","stopAllAudio","playNextBatch","allChunks","totalLength","forEach","setTimeout","mergedData","offset","set","audioBuffer","createBuffer","getChannelData","source","createBufferSource","buffer","connect","destination","onended","duration","toFixed","idx","indexOf","splice","start","node","stop","mounted","addEventListener","once","beforeDestroy","close"],"sources":["src/components/ChatPage.vue"],"sourcesContent":["<template>\n  <div>\n    <div>\n      <input\n        v-model=\"text\"\n        placeholder=\"输入文本，回车发送\"\n        @keyup.enter=\"sendText\"\n        style=\"width: 300px; padding: 8px\"\n      />\n      <button @click=\"sendText\">发送</button>\n    </div>\n\n    <div style=\"margin-top: 20px;\">\n      <div v-for=\"(msg, index) in showMessages\" :key=\"index\">\n        <b>{{ msg.role }}:</b> {{ msg.content }}\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      text: '',\n      message: '',\n      messages: [],\n      sessionID: 'sess1',\n      wsText: null,\n      wsAudio: null,\n      audioCtx: null,\n      audioPlayingNodes: [],\n      userInteracted: false, // 用于第一次交互激活 AudioContext\n      audioChunks: [], // 存储原始Float32Array数据\n    audioSampleRate: 24000,\n    playbackSource: null,\n    isPlaying: false,\n    };\n  },\n  computed: {\n    showMessages() {\n      const all = [...this.messages];\n      if (this.message.trim()) {\n        all.push({ role: 'assistant', content: this.message });\n      }\n      return all;\n    }\n  },\n  methods: {\n    sendText() {\n      if (!this.text.trim()) return;\n\n      if (!this.userInteracted) {\n        this.resumeAudioContext();\n        this.userInteracted = true;\n      }\n\n      this.wsText.send(this.text.trim());\n      this.messages.push({ role: 'user', content: this.text.trim() });\n      this.text = '';\n    },\n    resumeAudioContext() {\n      if (this.audioCtx && this.audioCtx.state === 'suspended') {\n        this.audioCtx.resume();\n      }\n    },\n    setupTextSocket() {\n      this.wsText = new WebSocket(`ws://localhost:8080/ws/text-stream?sessionid=${this.sessionID}`);\n\n      this.wsText.onopen = () => {\n        console.log('文本 WebSocket 已连接');\n      };\n\n      this.wsText.onmessage = (event) => {\n        const chunk = event.data;\n        this.message += chunk;\n\n        if (chunk === '\\n\\n') {\n          this.messages.push({ role: 'assistant', content: this.message });\n          this.message = '';\n        }\n      };\n\n      this.wsText.onerror = (e) => {\n        console.error('文本 WebSocket 错误', e);\n      };\n\n      this.wsText.onclose = () => {\n        console.log('文本 WebSocket 已关闭');\n      };\n    },\n   // 修改 setupAudioSocket 方法\nsetupAudioSocket() {\n  this.audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n  this.audioQueue = [];\n  this.currentlyPlaying = false;\n\n  this.wsAudio = new WebSocket(`ws://localhost:8080/ws/audio-stream?sessionid=${this.sessionID}`);\n  this.wsAudio.binaryType = 'arraybuffer';\n\n  this.wsAudio.onopen = () => {\n    console.log('音频 WebSocket 已连接');\n  };\n\n  this.wsAudio.onmessage = (event) => {\n   if (!this.userInteracted) {\n    this.resumeAudioContext();\n    this.userInteracted = true;\n  }\n\n  try {\n    const arrayBuffer = event.data;\n    const pcmData = new Int16Array(arrayBuffer);\n    \n    // 转换为Float32数据\n    const float32Data = new Float32Array(pcmData.length);\n    for (let i = 0; i < pcmData.length; i++) {\n      float32Data[i] = pcmData[i] / 32768.0;\n    }\n    \n    // 直接添加到块列表\n    this.audioChunks.push(float32Data);\n    console.log(`添加音频块: ${float32Data.length} 样本, 总块数: ${this.audioChunks.length}`);\n    \n    // 如果这是第一块或者之前的播放已结束，开始播放\n    if (!this.isPlaying) {\n      this.startContinuousPlayback();\n    }\n    \n  } catch (err) {\n    console.error('处理音频数据失败:', err);\n  }\n  };\n\n  this.wsAudio.onerror = (e) => {\n    console.error('音频 WebSocket 错误', e);\n  };\n\n  this.wsAudio.onclose = () => {\n    console.log('音频 WebSocket 已关闭');\n    this.stopAllAudio();\n  };\n},\n// 连续播放方法\nstartContinuousPlayback() {\n  if (this.audioChunks.length === 0 || this.isPlaying) {\n    return;\n  }\n  \n  console.log('开始连续播放音频');\n  this.isPlaying = true;\n  \n  // 将所有chunks拼接成一个大的音频buffer\n  const playNextBatch = () => {\n    if (this.audioChunks.length === 0) {\n      console.log('所有音频块播放完毕');\n      this.isPlaying = false;\n      return;\n    }\n    \n    // 一次性处理所有可用的chunks\n    const allChunks = [...this.audioChunks];\n    this.audioChunks = []; // 清空chunks数组\n    \n    // 计算总长度\n    let totalLength = 0;\n    allChunks.forEach(chunk => {\n      totalLength += chunk.length;\n    });\n    \n    if (totalLength === 0) {\n      setTimeout(playNextBatch, 50); // 等待更多数据\n      return;\n    }\n    \n    // 创建合并的音频数据\n    const mergedData = new Float32Array(totalLength);\n    let offset = 0;\n    allChunks.forEach(chunk => {\n      mergedData.set(chunk, offset);\n      offset += chunk.length;\n    });\n    \n    // 创建AudioBuffer\n    const audioBuffer = this.audioCtx.createBuffer(1, mergedData.length, this.audioSampleRate);\n    audioBuffer.getChannelData(0).set(mergedData);\n    \n    // 播放\n    const source = this.audioCtx.createBufferSource();\n    source.buffer = audioBuffer;\n    source.connect(this.audioCtx.destination);\n    \n    source.onended = () => {\n      console.log(`播放完成一批音频: ${mergedData.length} 样本, ${audioBuffer.duration.toFixed(3)}秒`);\n      const idx = this.audioPlayingNodes.indexOf(source);\n      if (idx !== -1) {\n        this.audioPlayingNodes.splice(idx, 1);\n      }\n      \n      // 继续播放下一批\n      setTimeout(playNextBatch, 10);\n    };\n    \n    this.audioPlayingNodes.push(source);\n    source.start();\n    \n    console.log(`播放音频批次: ${mergedData.length} 样本, ${audioBuffer.duration.toFixed(3)}秒`);\n  };\n  \n  playNextBatch();\n},\n\n   // 修改 stopAllAudio 方法\nstopAllAudio() {\n  console.log('停止所有音频播放');\n  \n  this.audioPlayingNodes.forEach(node => {\n    try {\n      node.stop();\n    } catch (e) {\n      console.error('停止音频节点失败:', e);\n    }\n  });\n  this.audioPlayingNodes = [];\n  \n  // 重置状态\n  this.audioChunks = [];\n  this.isPlaying = false;\n  \n  console.log('音频播放已停止，状态已重置');\n}\n  },\n  mounted() {\n    // 监听用户交互，保证 AudioContext 激活\n    window.addEventListener('click', () => {\n      if (!this.userInteracted) {\n        this.resumeAudioContext();\n        this.userInteracted = true;\n      }\n    }, { once: true });\n\n    this.setupTextSocket();\n    this.setupAudioSocket();\n  },\n  beforeDestroy() {\n    if (this.wsText) this.wsText.close();\n    if (this.wsAudio) this.wsAudio.close();\n    this.stopAllAudio();\n    if (this.audioCtx) this.audioCtx.close();\n  }\n};\n</script>\n\n<style scoped>\ninput {\n  margin-right: 8px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}