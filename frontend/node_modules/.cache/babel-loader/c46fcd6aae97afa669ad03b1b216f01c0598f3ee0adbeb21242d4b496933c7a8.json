{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nexport default {\n  data() {\n    return {\n      text: '',\n      message: '',\n      messages: [],\n      sessionID: 'sess1',\n      wsText: null,\n      wsAudio: null,\n      audioCtx: null,\n      audioWorkletNode: null,\n      userInteracted: false,\n      sampleRate: 24000\n    };\n  },\n  computed: {\n    showMessages() {\n      const all = [...this.messages];\n      if (this.message.trim()) {\n        all.push({\n          role: 'assistant',\n          content: this.message\n        });\n      }\n      return all;\n    }\n  },\n  methods: {\n    sendText() {\n      if (!this.text.trim()) return;\n      if (!this.userInteracted) {\n        this.resumeAudioContext();\n        this.userInteracted = true;\n      }\n      this.wsText.send(this.text.trim());\n      this.messages.push({\n        role: 'user',\n        content: this.text.trim()\n      });\n      this.text = '';\n    },\n    resumeAudioContext() {\n      if (this.audioCtx && this.audioCtx.state === 'suspended') {\n        this.audioCtx.resume();\n      }\n    },\n    async setupTextSocket() {\n      this.wsText = new WebSocket(`ws://localhost:8080/ws/text-stream?sessionid=${this.sessionID}`);\n      this.wsText.onopen = () => {\n        console.log('文本 WebSocket 已连接');\n      };\n      this.wsText.onmessage = event => {\n        const chunk = event.data;\n        this.message += chunk;\n        if (chunk === '\\n\\n') {\n          this.messages.push({\n            role: 'assistant',\n            content: this.message\n          });\n          this.message = '';\n        }\n      };\n      this.wsText.onerror = e => {\n        console.error('文本 WebSocket 错误', e);\n      };\n      this.wsText.onclose = () => {\n        console.log('文本 WebSocket 已关闭');\n      };\n    },\n    async setupAudioSocket() {\n      this.audioCtx = new (window.AudioContext || window.webkitAudioContext)({\n        sampleRate: this.sampleRate\n      });\n\n      // 加载 AudioWorklet 脚本\n      try {\n        await this.audioCtx.audioWorklet.addModule('/pcm-player-processor.js');\n      } catch (e) {\n        console.error('加载 AudioWorklet 失败:', e);\n        return;\n      }\n      this.audioWorkletNode = new AudioWorkletNode(this.audioCtx, 'pcm-player-processor');\n      this.audioWorkletNode.connect(this.audioCtx.destination);\n      this.wsAudio = new WebSocket(`ws://localhost:8080/ws/audio-stream?sessionid=${this.sessionID}`);\n      this.wsAudio.binaryType = 'arraybuffer';\n      this.wsAudio.onopen = () => {\n        console.log('音频 WebSocket 已连接');\n      };\n      this.wsAudio.onmessage = event => {\n        if (!this.userInteracted) {\n          this.resumeAudioContext();\n          this.userInteracted = true;\n        }\n        try {\n          const arrayBuffer = event.data;\n          const dataView = new DataView(arrayBuffer);\n          const length = arrayBuffer.byteLength / 2;\n          const float32Data = new Float32Array(length);\n          for (let i = 0; i < length; i++) {\n            const int16 = dataView.getInt16(i * 2, true);\n            float32Data[i] = int16 / 32768;\n          }\n\n          // 发送到AudioWorkletProcessor\n          this.audioWorkletNode.port.postMessage(float32Data);\n        } catch (err) {\n          console.error('播放音频数据失败:', err);\n        }\n      };\n      this.wsAudio.onerror = e => {\n        console.error('音频 WebSocket 错误', e);\n      };\n      this.wsAudio.onclose = () => {\n        console.log('音频 WebSocket 已关闭');\n      };\n    }\n  },\n  mounted() {\n    // 用户第一次交互激活 AudioContext\n    window.addEventListener('click', () => {\n      if (!this.userInteracted) {\n        this.resumeAudioContext();\n        this.userInteracted = true;\n      }\n    }, {\n      once: true\n    });\n    this.setupTextSocket();\n    this.setupAudioSocket();\n  },\n  beforeDestroy() {\n    if (this.wsText) this.wsText.close();\n    if (this.wsAudio) this.wsAudio.close();\n    if (this.audioCtx) this.audioCtx.close();\n  }\n};","map":{"version":3,"names":["data","text","message","messages","sessionID","wsText","wsAudio","audioCtx","audioWorkletNode","userInteracted","sampleRate","computed","showMessages","all","trim","push","role","content","methods","sendText","resumeAudioContext","send","state","resume","setupTextSocket","WebSocket","onopen","console","log","onmessage","event","chunk","onerror","e","error","onclose","setupAudioSocket","window","AudioContext","webkitAudioContext","audioWorklet","addModule","AudioWorkletNode","connect","destination","binaryType","arrayBuffer","dataView","DataView","length","byteLength","float32Data","Float32Array","i","int16","getInt16","port","postMessage","err","mounted","addEventListener","once","beforeDestroy","close"],"sources":["src/components/ChatPage.vue"],"sourcesContent":["<template>\n  <div>\n    <div>\n      <input\n        v-model=\"text\"\n        placeholder=\"输入文本，回车发送\"\n        @keyup.enter=\"sendText\"\n        style=\"width: 300px; padding: 8px\"\n      />\n      <button @click=\"sendText\">发送</button>\n    </div>\n\n    <div style=\"margin-top: 20px;\">\n      <div v-for=\"(msg, index) in showMessages\" :key=\"index\">\n        <b>{{ msg.role }}:</b> {{ msg.content }}\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      text: '',\n      message: '',\n      messages: [],\n      sessionID: 'sess1',\n      wsText: null,\n      wsAudio: null,\n      audioCtx: null,\n      audioWorkletNode: null,\n      userInteracted: false,\n      sampleRate: 24000,\n    };\n  },\n  computed: {\n    showMessages() {\n      const all = [...this.messages];\n      if (this.message.trim()) {\n        all.push({ role: 'assistant', content: this.message });\n      }\n      return all;\n    }\n  },\n  methods: {\n    sendText() {\n      if (!this.text.trim()) return;\n\n      if (!this.userInteracted) {\n        this.resumeAudioContext();\n        this.userInteracted = true;\n      }\n\n      this.wsText.send(this.text.trim());\n      this.messages.push({ role: 'user', content: this.text.trim() });\n      this.text = '';\n    },\n    resumeAudioContext() {\n      if (this.audioCtx && this.audioCtx.state === 'suspended') {\n        this.audioCtx.resume();\n      }\n    },\n    async setupTextSocket() {\n      this.wsText = new WebSocket(`ws://localhost:8080/ws/text-stream?sessionid=${this.sessionID}`);\n\n      this.wsText.onopen = () => {\n        console.log('文本 WebSocket 已连接');\n      };\n\n      this.wsText.onmessage = (event) => {\n        const chunk = event.data;\n        this.message += chunk;\n\n        if (chunk === '\\n\\n') {\n          this.messages.push({ role: 'assistant', content: this.message });\n          this.message = '';\n        }\n      };\n\n      this.wsText.onerror = (e) => {\n        console.error('文本 WebSocket 错误', e);\n      };\n\n      this.wsText.onclose = () => {\n        console.log('文本 WebSocket 已关闭');\n      };\n    },\n    async setupAudioSocket() {\n      this.audioCtx = new (window.AudioContext || window.webkitAudioContext)({\n        sampleRate: this.sampleRate,\n      });\n\n      // 加载 AudioWorklet 脚本\n      try {\n        await this.audioCtx.audioWorklet.addModule('/pcm-player-processor.js');\n      } catch (e) {\n        console.error('加载 AudioWorklet 失败:', e);\n        return;\n      }\n\n      this.audioWorkletNode = new AudioWorkletNode(this.audioCtx, 'pcm-player-processor');\n      this.audioWorkletNode.connect(this.audioCtx.destination);\n\n      this.wsAudio = new WebSocket(`ws://localhost:8080/ws/audio-stream?sessionid=${this.sessionID}`);\n      this.wsAudio.binaryType = 'arraybuffer';\n\n      this.wsAudio.onopen = () => {\n        console.log('音频 WebSocket 已连接');\n      };\n\n      this.wsAudio.onmessage = (event) => {\n        if (!this.userInteracted) {\n          this.resumeAudioContext();\n          this.userInteracted = true;\n        }\n\n        try {\n          const arrayBuffer = event.data;\n          const dataView = new DataView(arrayBuffer);\n          const length = arrayBuffer.byteLength / 2;\n          const float32Data = new Float32Array(length);\n\n          for (let i = 0; i < length; i++) {\n            const int16 = dataView.getInt16(i * 2, true);\n            float32Data[i] = int16 / 32768;\n          }\n\n          // 发送到AudioWorkletProcessor\n          this.audioWorkletNode.port.postMessage(float32Data);\n\n        } catch (err) {\n          console.error('播放音频数据失败:', err);\n        }\n      };\n\n      this.wsAudio.onerror = (e) => {\n        console.error('音频 WebSocket 错误', e);\n      };\n\n      this.wsAudio.onclose = () => {\n        console.log('音频 WebSocket 已关闭');\n      };\n    }\n  },\n  mounted() {\n    // 用户第一次交互激活 AudioContext\n    window.addEventListener('click', () => {\n      if (!this.userInteracted) {\n        this.resumeAudioContext();\n        this.userInteracted = true;\n      }\n    }, { once: true });\n\n    this.setupTextSocket();\n    this.setupAudioSocket();\n  },\n  beforeDestroy() {\n    if (this.wsText) this.wsText.close();\n    if (this.wsAudio) this.wsAudio.close();\n    if (this.audioCtx) this.audioCtx.close();\n  }\n};\n</script>\n\n<style scoped>\ninput {\n  margin-right: 8px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}