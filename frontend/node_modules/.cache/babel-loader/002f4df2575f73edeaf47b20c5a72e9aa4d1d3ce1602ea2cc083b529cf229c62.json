{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport \"core-js/modules/web.dom-exception.stack.js\";\nexport default {\n  data() {\n    return {\n      textMessage: '',\n      textResponse: '',\n      audioPlaying: false,\n      sessionID: 'sess1',\n      textSocket: null,\n      audioSocket: null,\n      audioContext: null,\n      audioSources: []\n    };\n  },\n  methods: {\n    log(...args) {\n      console.log('[ChatPage]', ...args);\n    },\n    sendTextMessage() {\n      if (!this.textMessage.trim()) {\n        this.log('发送文本消息失败，内容为空');\n        return;\n      }\n      if (!this.textSocket || this.textSocket.readyState !== WebSocket.OPEN) {\n        this.log('文本 WebSocket 未连接或未打开');\n        return;\n      }\n      this.log('发送文本消息:', this.textMessage);\n      this.textSocket.send(this.textMessage);\n      this.textMessage = '';\n    },\n    startAudioStream() {\n      if (!this.audioSocket || this.audioSocket.readyState !== WebSocket.OPEN) {\n        this.log('音频 WebSocket 未连接或未打开');\n        return;\n      }\n      this.log('请求开始音频流');\n      this.audioPlaying = true;\n      if (this.audioContext.state === 'suspended') {\n        this.audioContext.resume().then(() => {\n          this.audioSocket.send('start');\n        });\n      } else {\n        this.audioSocket.send('start');\n      }\n    },\n    stopAudioStream() {\n      if (!this.audioSocket || this.audioSocket.readyState !== WebSocket.OPEN) {\n        this.log('音频 WebSocket 未连接或未打开');\n        return;\n      }\n      this.log('请求停止音频流');\n      this.audioPlaying = false;\n      this.audioSocket.send('stop');\n      this.stopAllAudio();\n    },\n    stopAllAudio() {\n      this.log('停止所有播放中的音频');\n      this.audioSources.forEach(source => {\n        try {\n          source.stop();\n        } catch (e) {\n          this.log('停止音频出错:', e);\n        }\n      });\n      this.audioSources = [];\n    },\n    listenForTextResponse() {\n      this.textSocket.onmessage = event => {\n        this.log('收到文本回复:', event.data);\n        this.textResponse = event.data;\n      };\n      this.textSocket.onerror = e => {\n        this.log('文本 WebSocket 错误:', e);\n      };\n      this.textSocket.onclose = () => {\n        this.log('文本 WebSocket 连接关闭');\n      };\n    },\n    listenForAudioResponse() {\n      this.audioSocket.onmessage = event => {\n        this.log('收到音频数据:', event.data);\n        if (typeof event.data === 'string') {\n          // 假设是 Base64 PCM 裸流\n          this.appendPCMBuffer(event.data);\n        } else if (event.data instanceof Blob) {\n          const reader = new FileReader();\n          reader.onloadend = () => {\n            const base64 = reader.result.split(',')[1];\n            this.appendPCMBuffer(base64);\n          };\n          reader.readAsDataURL(event.data);\n        } else if (event.data instanceof ArrayBuffer) {\n          const base64 = this.arrayBufferToBase64(event.data);\n          this.appendPCMBuffer(base64);\n        } else {\n          this.log('未知音频数据格式:', event.data);\n        }\n      };\n      this.audioSocket.onerror = e => {\n        this.log('音频 WebSocket 错误:', e);\n      };\n      this.audioSocket.onclose = () => {\n        this.log('音频 WebSocket 连接关闭');\n      };\n    },\n    initWebSockets() {\n      this.log('初始化文本 WebSocket');\n      this.textSocket = new WebSocket(`ws://localhost:8080/ws/text-stream?sessionid=${this.sessionID}`);\n      this.textSocket.onopen = () => {\n        this.log('文本 WebSocket 连接已建立');\n        this.listenForTextResponse();\n      };\n      this.log('初始化音频 WebSocket');\n      this.audioSocket = new WebSocket(`ws://localhost:8080/ws/audio-stream?sessionid=${this.sessionID}`);\n      this.audioSocket.onopen = () => {\n        this.log('音频 WebSocket 连接已建立');\n        this.listenForAudioResponse();\n      };\n    },\n    initAudioContext() {\n      this.audioContext = new (window.AudioContext || window.webkitAudioContext)();\n    },\n    decodeBase64(base64String) {\n      const cleaned = base64String.replace(/[^A-Za-z0-9+/=]/g, '');\n      try {\n        const binary = atob(cleaned);\n        const bytes = new Uint8Array(binary.length);\n        for (let i = 0; i < binary.length; i++) {\n          bytes[i] = binary.charCodeAt(i);\n        }\n        return bytes;\n      } catch (e) {\n        this.log('Base64 解码失败:', e);\n        return new Uint8Array();\n      }\n    },\n    arrayBufferToBase64(buffer) {\n      let binary = '';\n      const bytes = new Uint8Array(buffer);\n      for (let i = 0; i < bytes.byteLength; i++) {\n        binary += String.fromCharCode(bytes[i]);\n      }\n      return window.btoa(binary);\n    },\n    appendPCMBuffer(base64PCM) {\n      if (!this.audioContext || !this.audioPlaying) {\n        this.log('音频上下文未准备好或音频播放未启动，丢弃数据');\n        return;\n      }\n      const pcmBytes = this.decodeBase64(base64PCM);\n      if (pcmBytes.length === 0) {\n        this.log('空的PCM数据，忽略');\n        return;\n      }\n      const pcmSamples = new Int16Array(pcmBytes.buffer);\n      const floatSamples = new Float32Array(pcmSamples.length);\n      for (let i = 0; i < pcmSamples.length; i++) {\n        floatSamples[i] = pcmSamples[i] / 32768;\n      }\n      const audioBuffer = this.audioContext.createBuffer(1, floatSamples.length, 16000);\n      audioBuffer.getChannelData(0).set(floatSamples);\n      const source = this.audioContext.createBufferSource();\n      source.buffer = audioBuffer;\n      source.connect(this.audioContext.destination);\n      source.start();\n      this.audioSources.push(source);\n      source.onended = () => {\n        this.audioSources = this.audioSources.filter(s => s !== source);\n        this.log('一个音频片段播放结束');\n      };\n    }\n  },\n  mounted() {\n    this.initAudioContext();\n    this.initWebSockets();\n  },\n  beforeDestroy() {\n    if (this.textSocket) this.textSocket.close();\n    if (this.audioSocket) this.audioSocket.close();\n    if (this.audioContext) this.audioContext.close();\n  }\n};","map":{"version":3,"names":["data","textMessage","textResponse","audioPlaying","sessionID","textSocket","audioSocket","audioContext","audioSources","methods","log","args","console","sendTextMessage","trim","readyState","WebSocket","OPEN","send","startAudioStream","state","resume","then","stopAudioStream","stopAllAudio","forEach","source","stop","e","listenForTextResponse","onmessage","event","onerror","onclose","listenForAudioResponse","appendPCMBuffer","Blob","reader","FileReader","onloadend","base64","result","split","readAsDataURL","ArrayBuffer","arrayBufferToBase64","initWebSockets","onopen","initAudioContext","window","AudioContext","webkitAudioContext","decodeBase64","base64String","cleaned","replace","binary","atob","bytes","Uint8Array","length","i","charCodeAt","buffer","byteLength","String","fromCharCode","btoa","base64PCM","pcmBytes","pcmSamples","Int16Array","floatSamples","Float32Array","audioBuffer","createBuffer","getChannelData","set","createBufferSource","connect","destination","start","push","onended","filter","s","mounted","beforeDestroy","close"],"sources":["src/components/ChatPage.vue"],"sourcesContent":["<template>\n  <div>\n    <h2>聊天文本</h2>\n    <input v-model=\"textMessage\" @keyup.enter=\"sendTextMessage\" placeholder=\"输入消息后回车或点发送\" />\n    <button @click=\"sendTextMessage\">发送文本消息</button>\n\n    <div v-if=\"textResponse\">\n      <h3>文本回复：</h3>\n      <pre>{{ textResponse }}</pre>\n    </div>\n\n    <div v-if=\"textResponse\">\n      <button @click=\"startAudioStream\" :disabled=\"audioPlaying\">播放音频</button>\n      <button @click=\"stopAudioStream\" :disabled=\"!audioPlaying\">停止音频</button>\n    </div>\n\n    <div v-if=\"audioPlaying\">\n      <h3>音频正在播放...</h3>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      textMessage: '',\n      textResponse: '',\n      audioPlaying: false,\n      sessionID: 'sess1',\n      textSocket: null,\n      audioSocket: null,\n      audioContext: null,\n      audioSources: [],\n    };\n  },\n\n  methods: {\n    log(...args) {\n      console.log('[ChatPage]', ...args);\n    },\n\n    sendTextMessage() {\n      if (!this.textMessage.trim()) {\n        this.log('发送文本消息失败，内容为空');\n        return;\n      }\n      if (!this.textSocket || this.textSocket.readyState !== WebSocket.OPEN) {\n        this.log('文本 WebSocket 未连接或未打开');\n        return;\n      }\n      this.log('发送文本消息:', this.textMessage);\n      this.textSocket.send(this.textMessage);\n      this.textMessage = '';\n    },\n\n    startAudioStream() {\n      if (!this.audioSocket || this.audioSocket.readyState !== WebSocket.OPEN) {\n        this.log('音频 WebSocket 未连接或未打开');\n        return;\n      }\n      this.log('请求开始音频流');\n      this.audioPlaying = true;\n      if (this.audioContext.state === 'suspended') {\n        this.audioContext.resume().then(() => {\n          this.audioSocket.send('start');\n        });\n      } else {\n        this.audioSocket.send('start');\n      }\n    },\n\n    stopAudioStream() {\n      if (!this.audioSocket || this.audioSocket.readyState !== WebSocket.OPEN) {\n        this.log('音频 WebSocket 未连接或未打开');\n        return;\n      }\n      this.log('请求停止音频流');\n      this.audioPlaying = false;\n      this.audioSocket.send('stop');\n      this.stopAllAudio();\n    },\n\n    stopAllAudio() {\n      this.log('停止所有播放中的音频');\n      this.audioSources.forEach(source => {\n        try {\n          source.stop();\n        } catch (e) {\n          this.log('停止音频出错:', e);\n        }\n      });\n      this.audioSources = [];\n    },\n\n    listenForTextResponse() {\n      this.textSocket.onmessage = (event) => {\n        this.log('收到文本回复:', event.data);\n        this.textResponse = event.data;\n      };\n      this.textSocket.onerror = (e) => {\n        this.log('文本 WebSocket 错误:', e);\n      };\n      this.textSocket.onclose = () => {\n        this.log('文本 WebSocket 连接关闭');\n      };\n    },\n\n    listenForAudioResponse() {\n      this.audioSocket.onmessage = (event) => {\n        this.log('收到音频数据:', event.data);\n\n        if (typeof event.data === 'string') {\n          // 假设是 Base64 PCM 裸流\n          this.appendPCMBuffer(event.data);\n        } else if (event.data instanceof Blob) {\n          const reader = new FileReader();\n          reader.onloadend = () => {\n            const base64 = reader.result.split(',')[1];\n            this.appendPCMBuffer(base64);\n          };\n          reader.readAsDataURL(event.data);\n        } else if (event.data instanceof ArrayBuffer) {\n          const base64 = this.arrayBufferToBase64(event.data);\n          this.appendPCMBuffer(base64);\n        } else {\n          this.log('未知音频数据格式:', event.data);\n        }\n      };\n      this.audioSocket.onerror = (e) => {\n        this.log('音频 WebSocket 错误:', e);\n      };\n      this.audioSocket.onclose = () => {\n        this.log('音频 WebSocket 连接关闭');\n      };\n    },\n\n    initWebSockets() {\n      this.log('初始化文本 WebSocket');\n      this.textSocket = new WebSocket(`ws://localhost:8080/ws/text-stream?sessionid=${this.sessionID}`);\n      this.textSocket.onopen = () => {\n        this.log('文本 WebSocket 连接已建立');\n        this.listenForTextResponse();\n      };\n\n      this.log('初始化音频 WebSocket');\n      this.audioSocket = new WebSocket(`ws://localhost:8080/ws/audio-stream?sessionid=${this.sessionID}`);\n      this.audioSocket.onopen = () => {\n        this.log('音频 WebSocket 连接已建立');\n        this.listenForAudioResponse();\n      };\n    },\n\n    initAudioContext() {\n      this.audioContext = new (window.AudioContext || window.webkitAudioContext)();\n    },\n\n    decodeBase64(base64String) {\n      const cleaned = base64String.replace(/[^A-Za-z0-9+/=]/g, '');\n      try {\n        const binary = atob(cleaned);\n        const bytes = new Uint8Array(binary.length);\n        for (let i = 0; i < binary.length; i++) {\n          bytes[i] = binary.charCodeAt(i);\n        }\n        return bytes;\n      } catch (e) {\n        this.log('Base64 解码失败:', e);\n        return new Uint8Array();\n      }\n    },\n\n    arrayBufferToBase64(buffer) {\n      let binary = '';\n      const bytes = new Uint8Array(buffer);\n      for (let i = 0; i < bytes.byteLength; i++) {\n        binary += String.fromCharCode(bytes[i]);\n      }\n      return window.btoa(binary);\n    },\n\n    appendPCMBuffer(base64PCM) {\n      if (!this.audioContext || !this.audioPlaying) {\n        this.log('音频上下文未准备好或音频播放未启动，丢弃数据');\n        return;\n      }\n\n      const pcmBytes = this.decodeBase64(base64PCM);\n      if (pcmBytes.length === 0) {\n        this.log('空的PCM数据，忽略');\n        return;\n      }\n\n      const pcmSamples = new Int16Array(pcmBytes.buffer);\n\n      const floatSamples = new Float32Array(pcmSamples.length);\n      for (let i = 0; i < pcmSamples.length; i++) {\n        floatSamples[i] = pcmSamples[i] / 32768;\n      }\n\n      const audioBuffer = this.audioContext.createBuffer(1, floatSamples.length, 16000);\n      audioBuffer.getChannelData(0).set(floatSamples);\n\n      const source = this.audioContext.createBufferSource();\n      source.buffer = audioBuffer;\n      source.connect(this.audioContext.destination);\n      source.start();\n\n      this.audioSources.push(source);\n\n      source.onended = () => {\n        this.audioSources = this.audioSources.filter(s => s !== source);\n        this.log('一个音频片段播放结束');\n      };\n    }\n  },\n\n  mounted() {\n    this.initAudioContext();\n    this.initWebSockets();\n  },\n\n  beforeDestroy() {\n    if (this.textSocket) this.textSocket.close();\n    if (this.audioSocket) this.audioSocket.close();\n    if (this.audioContext) this.audioContext.close();\n  }\n};\n</script>\n\n<style scoped>\ninput {\n  width: 300px;\n  padding: 8px;\n  margin-right: 10px;\n}\n\nbutton {\n  padding: 8px 16px;\n  margin: 5px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}