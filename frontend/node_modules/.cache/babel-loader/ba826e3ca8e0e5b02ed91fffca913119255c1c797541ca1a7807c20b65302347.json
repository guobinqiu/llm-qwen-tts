{"ast":null,"code":"export default {\n  data() {\n    return {\n      textMessage: '',\n      textResponse: '',\n      audioData: null,\n      audioPlaying: false,\n      // 控制音频是否播放\n      sessionID: 'sess1',\n      // 根据需求修改\n      textSocket: null,\n      // 文本 WebSocket 连接\n      audioSocket: null // 音频 WebSocket 连接\n    };\n  },\n  methods: {\n    // 发送文本消息\n    sendTextMessage() {\n      if (this.textMessage.trim()) {\n        // 发送文本消息给后端\n        this.textSocket.send(JSON.stringify({\n          sessionid: this.sessionID,\n          message: this.textMessage\n        }));\n        this.textMessage = ''; // 清空输入框\n      }\n    },\n    // 启动音频流\n    startAudioStream() {\n      this.audioPlaying = true;\n      this.audioSocket.send(JSON.stringify({\n        sessionid: this.sessionID\n      }));\n    },\n    // 停止音频流\n    stopAudioStream() {\n      this.audioPlaying = false;\n      this.audioSocket.send(JSON.stringify({\n        sessionid: this.sessionID,\n        stop: true\n      }));\n      this.audioData = null; // 停止音频播放\n    },\n    // 监听文本流响应\n    listenForTextResponse() {\n      this.textSocket.onmessage = event => {\n        console.log(\"收到文本消息:\", event.data);\n        this.textResponse = event.data;\n      };\n    },\n    // 监听音频流响应\n    listenForAudioResponse() {\n      this.audioSocket.onmessage = event => {\n        const audioBase64 = event.data;\n        this.audioData = `data:audio/wav;base64,${audioBase64}`;\n      };\n    },\n    // 初始化 WebSocket 连接\n    initWebSockets() {\n      // 文本 WebSocket 连接\n      this.textSocket = new WebSocket('ws://localhost:8080/ws/text-stream');\n      this.textSocket.onopen = () => {\n        console.log('文本流 WebSocket 连接已建立');\n        this.listenForTextResponse();\n      };\n\n      // 音频 WebSocket 连接\n      this.audioSocket = new WebSocket('ws://localhost:8080/ws/audio-stream');\n      this.audioSocket.onopen = () => {\n        console.log('音频流 WebSocket 连接已建立');\n        this.listenForAudioResponse();\n      };\n    }\n  },\n  mounted() {\n    this.initWebSockets();\n  },\n  beforeDestroy() {\n    // 关闭 WebSocket 连接\n    if (this.textSocket) {\n      this.textSocket.close();\n    }\n    if (this.audioSocket) {\n      this.audioSocket.close();\n    }\n  }\n};","map":{"version":3,"names":["data","textMessage","textResponse","audioData","audioPlaying","sessionID","textSocket","audioSocket","methods","sendTextMessage","trim","send","JSON","stringify","sessionid","message","startAudioStream","stopAudioStream","stop","listenForTextResponse","onmessage","event","console","log","listenForAudioResponse","audioBase64","initWebSockets","WebSocket","onopen","mounted","beforeDestroy","close"],"sources":["src/components/ChatPage.vue"],"sourcesContent":["<template>\n  <div>\n    <!-- 输入文本消息 -->\n    <div>\n      <input v-model=\"textMessage\" @keyup.enter=\"sendTextMessage\" placeholder=\"输入消息...\" />\n      <button @click=\"sendTextMessage\">发送文本消息</button>\n    </div>\n\n    <!-- 显示文本消息 -->\n    <div v-if=\"textResponse\">\n      <h3>文本响应：</h3>\n      <p>{{ textResponse }}</p>\n    </div>\n\n    <!-- 控制音频流播放 -->\n    <div v-if=\"textResponse\">\n      <button @click=\"startAudioStream\" :disabled=\"audioPlaying\">播放音频</button>\n      <button @click=\"stopAudioStream\" :disabled=\"!audioPlaying\">停止音频</button>\n    </div>\n\n    <!-- 显示音频流 -->\n    <div v-if=\"audioData\">\n      <h3>音频响应：</h3>\n      <audio ref=\"audioPlayer\" :src=\"audioData\" controls autoplay></audio>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      textMessage: '',\n      textResponse: '',\n      audioData: null,\n      audioPlaying: false,  // 控制音频是否播放\n      sessionID: 'sess1',  // 根据需求修改\n      textSocket: null,    // 文本 WebSocket 连接\n      audioSocket: null,   // 音频 WebSocket 连接\n    };\n  },\n  methods: {\n    // 发送文本消息\n    sendTextMessage() {\n      if (this.textMessage.trim()) {\n        // 发送文本消息给后端\n        this.textSocket.send(JSON.stringify({ sessionid: this.sessionID, message: this.textMessage }));\n        this.textMessage = '';  // 清空输入框\n      }\n    },\n\n    // 启动音频流\n    startAudioStream() {\n      this.audioPlaying = true;\n      this.audioSocket.send(JSON.stringify({ sessionid: this.sessionID }));\n    },\n\n    // 停止音频流\n    stopAudioStream() {\n      this.audioPlaying = false;\n      this.audioSocket.send(JSON.stringify({ sessionid: this.sessionID, stop: true }));\n      this.audioData = null;  // 停止音频播放\n    },\n\n    // 监听文本流响应\n    listenForTextResponse() {\n      this.textSocket.onmessage = (event) => {\n        console.log(\"收到文本消息:\", event.data);\n        this.textResponse = event.data;\n      };\n    },\n\n    // 监听音频流响应\n    listenForAudioResponse() {\n      this.audioSocket.onmessage = (event) => {\n        const audioBase64 = event.data;\n        this.audioData = `data:audio/wav;base64,${audioBase64}`;\n      };\n    },\n\n    // 初始化 WebSocket 连接\n    initWebSockets() {\n      // 文本 WebSocket 连接\n      this.textSocket = new WebSocket('ws://localhost:8080/ws/text-stream');\n      this.textSocket.onopen = () => {\n        console.log('文本流 WebSocket 连接已建立');\n        this.listenForTextResponse();\n      };\n\n      // 音频 WebSocket 连接\n      this.audioSocket = new WebSocket('ws://localhost:8080/ws/audio-stream');\n      this.audioSocket.onopen = () => {\n        console.log('音频流 WebSocket 连接已建立');\n        this.listenForAudioResponse();\n      };\n    }\n  },\n\n  mounted() {\n    this.initWebSockets();\n  },\n\n  beforeDestroy() {\n    // 关闭 WebSocket 连接\n    if (this.textSocket) {\n      this.textSocket.close();\n    }\n    if (this.audioSocket) {\n      this.audioSocket.close();\n    }\n  }\n}\n</script>\n\n<style scoped>\nh1 {\n  text-align: center;\n}\n\nbutton {\n  margin: 10px;\n  padding: 10px 20px;\n}\n\ninput {\n  padding: 10px;\n  width: 300px;\n}\n\ndiv {\n  margin: 20px;\n}\n</style>\n"],"mappings":"AA6BA;EACAA,KAAA;IACA;MACAC,WAAA;MACAC,YAAA;MACAC,SAAA;MACAC,YAAA;MAAA;MACAC,SAAA;MAAA;MACAC,UAAA;MAAA;MACAC,WAAA;IACA;EACA;EACAC,OAAA;IACA;IACAC,gBAAA;MACA,SAAAR,WAAA,CAAAS,IAAA;QACA;QACA,KAAAJ,UAAA,CAAAK,IAAA,CAAAC,IAAA,CAAAC,SAAA;UAAAC,SAAA,OAAAT,SAAA;UAAAU,OAAA,OAAAd;QAAA;QACA,KAAAA,WAAA;MACA;IACA;IAEA;IACAe,iBAAA;MACA,KAAAZ,YAAA;MACA,KAAAG,WAAA,CAAAI,IAAA,CAAAC,IAAA,CAAAC,SAAA;QAAAC,SAAA,OAAAT;MAAA;IACA;IAEA;IACAY,gBAAA;MACA,KAAAb,YAAA;MACA,KAAAG,WAAA,CAAAI,IAAA,CAAAC,IAAA,CAAAC,SAAA;QAAAC,SAAA,OAAAT,SAAA;QAAAa,IAAA;MAAA;MACA,KAAAf,SAAA;IACA;IAEA;IACAgB,sBAAA;MACA,KAAAb,UAAA,CAAAc,SAAA,GAAAC,KAAA;QACAC,OAAA,CAAAC,GAAA,YAAAF,KAAA,CAAArB,IAAA;QACA,KAAAE,YAAA,GAAAmB,KAAA,CAAArB,IAAA;MACA;IACA;IAEA;IACAwB,uBAAA;MACA,KAAAjB,WAAA,CAAAa,SAAA,GAAAC,KAAA;QACA,MAAAI,WAAA,GAAAJ,KAAA,CAAArB,IAAA;QACA,KAAAG,SAAA,4BAAAsB,WAAA;MACA;IACA;IAEA;IACAC,eAAA;MACA;MACA,KAAApB,UAAA,OAAAqB,SAAA;MACA,KAAArB,UAAA,CAAAsB,MAAA;QACAN,OAAA,CAAAC,GAAA;QACA,KAAAJ,qBAAA;MACA;;MAEA;MACA,KAAAZ,WAAA,OAAAoB,SAAA;MACA,KAAApB,WAAA,CAAAqB,MAAA;QACAN,OAAA,CAAAC,GAAA;QACA,KAAAC,sBAAA;MACA;IACA;EACA;EAEAK,QAAA;IACA,KAAAH,cAAA;EACA;EAEAI,cAAA;IACA;IACA,SAAAxB,UAAA;MACA,KAAAA,UAAA,CAAAyB,KAAA;IACA;IACA,SAAAxB,WAAA;MACA,KAAAA,WAAA,CAAAwB,KAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}