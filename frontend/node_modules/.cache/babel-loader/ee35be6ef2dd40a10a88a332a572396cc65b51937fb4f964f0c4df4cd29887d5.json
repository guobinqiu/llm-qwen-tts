{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nexport default {\n  data() {\n    return {\n      text: '',\n      message: '',\n      messages: [],\n      sessionID: 'sess1',\n      wsText: null,\n      wsAudio: null,\n      audioCtx: null,\n      audioPlayingNodes: [],\n      userInteracted: false,\n      // 用于第一次交互激活 AudioContext\n      audioQueue: [],\n      isPlayingAudio: false,\n      nextPlayTime: 0,\n      audioSampleRate: 24000\n    };\n  },\n  computed: {\n    showMessages() {\n      const all = [...this.messages];\n      if (this.message.trim()) {\n        all.push({\n          role: 'assistant',\n          content: this.message\n        });\n      }\n      return all;\n    }\n  },\n  methods: {\n    sendText() {\n      if (!this.text.trim()) return;\n      if (!this.userInteracted) {\n        this.resumeAudioContext();\n        this.userInteracted = true;\n      }\n      this.wsText.send(this.text.trim());\n      this.messages.push({\n        role: 'user',\n        content: this.text.trim()\n      });\n      this.text = '';\n    },\n    resumeAudioContext() {\n      if (this.audioCtx && this.audioCtx.state === 'suspended') {\n        this.audioCtx.resume();\n      }\n    },\n    setupTextSocket() {\n      this.wsText = new WebSocket(`ws://localhost:8080/ws/text-stream?sessionid=${this.sessionID}`);\n      this.wsText.onopen = () => {\n        console.log('文本 WebSocket 已连接');\n      };\n      this.wsText.onmessage = event => {\n        const chunk = event.data;\n        this.message += chunk;\n        if (chunk === '\\n\\n') {\n          this.messages.push({\n            role: 'assistant',\n            content: this.message\n          });\n          this.message = '';\n        }\n      };\n      this.wsText.onerror = e => {\n        console.error('文本 WebSocket 错误', e);\n      };\n      this.wsText.onclose = () => {\n        console.log('文本 WebSocket 已关闭');\n      };\n    },\n    setupAudioSocket() {\n      this.audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n      this.audioQueue = [];\n      this.isPlayingAudio = false;\n      this.nextPlayTime = 0;\n      this.wsAudio = new WebSocket(`ws://localhost:8080/ws/audio-stream?sessionid=${this.sessionID}`);\n      this.wsAudio.binaryType = 'arraybuffer';\n      this.wsAudio.onopen = () => {\n        console.log('音频 WebSocket 已连接');\n      };\n      this.wsAudio.onmessage = event => {\n        if (!this.userInteracted) {\n          this.resumeAudioContext();\n          this.userInteracted = true;\n        }\n        try {\n          const arrayBuffer = event.data;\n          console.log('接收到音频数据，字节长度:', arrayBuffer.byteLength);\n\n          // 转换为AudioBuffer\n          const pcmData = new Int16Array(arrayBuffer);\n          const float32Data = new Float32Array(pcmData.length);\n          for (let i = 0; i < pcmData.length; i++) {\n            float32Data[i] = pcmData[i] / 32768.0;\n          }\n          const audioBuffer = this.audioCtx.createBuffer(1, float32Data.length, this.audioSampleRate);\n          audioBuffer.getChannelData(0).set(float32Data);\n\n          // 添加到队列而不是立即播放\n          this.audioQueue.push(audioBuffer);\n          console.log(`音频块加入队列，队列长度: ${this.audioQueue.length}`);\n\n          // 如果当前没有播放，开始播放\n          if (!this.isPlayingAudio) {\n            this.playAudioQueue();\n          }\n        } catch (err) {\n          console.error('处理音频数据失败:', err);\n        }\n      };\n      this.wsAudio.onerror = e => {\n        console.error('音频 WebSocket 错误', e);\n      };\n      this.wsAudio.onclose = () => {\n        console.log('音频 WebSocket 已关闭');\n        this.stopAllAudio();\n        this.isPlayingAudio = false;\n      };\n    },\n    // 新增方法：连续播放音频队列\n    playAudioQueue() {\n      if (this.audioQueue.length === 0) {\n        this.isPlayingAudio = false;\n        return;\n      }\n      this.isPlayingAudio = true;\n      const audioBuffer = this.audioQueue.shift();\n      const source = this.audioCtx.createBufferSource();\n      source.buffer = audioBuffer;\n      source.connect(this.audioCtx.destination);\n\n      // 计算播放时间，确保连续播放\n      const currentTime = this.audioCtx.currentTime;\n      const startTime = Math.max(currentTime, this.nextPlayTime);\n      source.onended = () => {\n        // 从播放列表中移除\n        const idx = this.audioPlayingNodes.indexOf(source);\n        if (idx !== -1) this.audioPlayingNodes.splice(idx, 1);\n\n        // 继续播放队列中的下一个音频块\n        setTimeout(() => this.playAudioQueue(), 10); // 小延迟防止卡顿\n      };\n      this.audioPlayingNodes.push(source);\n      source.start(startTime);\n\n      // 更新下次播放时间\n      this.nextPlayTime = startTime + audioBuffer.duration;\n      console.log(`播放音频块，时长: ${audioBuffer.duration.toFixed(3)}秒，开始时间: ${startTime.toFixed(3)}秒`);\n    },\n    stopAllAudio() {\n      // 停止所有正在播放的音频\n      this.audioPlayingNodes.forEach(node => {\n        try {\n          node.stop();\n        } catch (e) {\n          console.error('停止音频节点失败:', e);\n        }\n      });\n      this.audioPlayingNodes = [];\n\n      // 清空队列\n      this.audioQueue = [];\n      this.isPlayingAudio = false;\n      this.nextPlayTime = 0;\n      console.log('所有音频已停止，队列已清空');\n    }\n  },\n  mounted() {\n    // 监听用户交互，保证 AudioContext 激活\n    window.addEventListener('click', () => {\n      if (!this.userInteracted) {\n        this.resumeAudioContext();\n        this.userInteracted = true;\n      }\n    }, {\n      once: true\n    });\n    this.setupTextSocket();\n    this.setupAudioSocket();\n  },\n  beforeDestroy() {\n    if (this.wsText) this.wsText.close();\n    if (this.wsAudio) this.wsAudio.close();\n    this.stopAllAudio();\n    if (this.audioCtx) this.audioCtx.close();\n  }\n};","map":{"version":3,"names":["data","text","message","messages","sessionID","wsText","wsAudio","audioCtx","audioPlayingNodes","userInteracted","audioQueue","isPlayingAudio","nextPlayTime","audioSampleRate","computed","showMessages","all","trim","push","role","content","methods","sendText","resumeAudioContext","send","state","resume","setupTextSocket","WebSocket","onopen","console","log","onmessage","event","chunk","onerror","e","error","onclose","setupAudioSocket","window","AudioContext","webkitAudioContext","binaryType","arrayBuffer","byteLength","pcmData","Int16Array","float32Data","Float32Array","length","i","audioBuffer","createBuffer","getChannelData","set","playAudioQueue","err","stopAllAudio","shift","source","createBufferSource","buffer","connect","destination","currentTime","startTime","Math","max","onended","idx","indexOf","splice","setTimeout","start","duration","toFixed","forEach","node","stop","mounted","addEventListener","once","beforeDestroy","close"],"sources":["src/components/ChatPage.vue"],"sourcesContent":["<template>\n  <div>\n    <div>\n      <input\n        v-model=\"text\"\n        placeholder=\"输入文本，回车发送\"\n        @keyup.enter=\"sendText\"\n        style=\"width: 300px; padding: 8px\"\n      />\n      <button @click=\"sendText\">发送</button>\n    </div>\n\n    <div style=\"margin-top: 20px;\">\n      <div v-for=\"(msg, index) in showMessages\" :key=\"index\">\n        <b>{{ msg.role }}:</b> {{ msg.content }}\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      text: '',\n      message: '',\n      messages: [],\n      sessionID: 'sess1',\n      wsText: null,\n      wsAudio: null,\n      audioCtx: null,\n      audioPlayingNodes: [],\n      userInteracted: false, // 用于第一次交互激活 AudioContext\n      audioQueue: [],\n      isPlayingAudio: false,\n      nextPlayTime: 0,\n      audioSampleRate: 24000,\n    };\n  },\n  computed: {\n    showMessages() {\n      const all = [...this.messages];\n      if (this.message.trim()) {\n        all.push({ role: 'assistant', content: this.message });\n      }\n      return all;\n    }\n  },\n  methods: {\n    sendText() {\n      if (!this.text.trim()) return;\n\n      if (!this.userInteracted) {\n        this.resumeAudioContext();\n        this.userInteracted = true;\n      }\n\n      this.wsText.send(this.text.trim());\n      this.messages.push({ role: 'user', content: this.text.trim() });\n      this.text = '';\n    },\n    resumeAudioContext() {\n      if (this.audioCtx && this.audioCtx.state === 'suspended') {\n        this.audioCtx.resume();\n      }\n    },\n    setupTextSocket() {\n      this.wsText = new WebSocket(`ws://localhost:8080/ws/text-stream?sessionid=${this.sessionID}`);\n\n      this.wsText.onopen = () => {\n        console.log('文本 WebSocket 已连接');\n      };\n\n      this.wsText.onmessage = (event) => {\n        const chunk = event.data;\n        this.message += chunk;\n\n        if (chunk === '\\n\\n') {\n          this.messages.push({ role: 'assistant', content: this.message });\n          this.message = '';\n        }\n      };\n\n      this.wsText.onerror = (e) => {\n        console.error('文本 WebSocket 错误', e);\n      };\n\n      this.wsText.onclose = () => {\n        console.log('文本 WebSocket 已关闭');\n      };\n    },\n    setupAudioSocket() {\n      this.audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n      this.audioQueue = [];\n      this.isPlayingAudio = false;\n      this.nextPlayTime = 0;\n\n      this.wsAudio = new WebSocket(`ws://localhost:8080/ws/audio-stream?sessionid=${this.sessionID}`);\n      this.wsAudio.binaryType = 'arraybuffer';\n\n      this.wsAudio.onopen = () => {\n        console.log('音频 WebSocket 已连接');\n      };\n\n      this.wsAudio.onmessage = (event) => {\n        if (!this.userInteracted) {\n          this.resumeAudioContext();\n          this.userInteracted = true;\n        }\n\n        try {\n          const arrayBuffer = event.data;\n          console.log('接收到音频数据，字节长度:', arrayBuffer.byteLength);\n          \n          // 转换为AudioBuffer\n          const pcmData = new Int16Array(arrayBuffer);\n          const float32Data = new Float32Array(pcmData.length);\n          \n          for (let i = 0; i < pcmData.length; i++) {\n            float32Data[i] = pcmData[i] / 32768.0;\n          }\n          \n          const audioBuffer = this.audioCtx.createBuffer(1, float32Data.length, this.audioSampleRate);\n          audioBuffer.getChannelData(0).set(float32Data);\n          \n          // 添加到队列而不是立即播放\n          this.audioQueue.push(audioBuffer);\n          console.log(`音频块加入队列，队列长度: ${this.audioQueue.length}`);\n          \n          // 如果当前没有播放，开始播放\n          if (!this.isPlayingAudio) {\n            this.playAudioQueue();\n          }\n          \n        } catch (err) {\n          console.error('处理音频数据失败:', err);\n        }\n      };\n\n      this.wsAudio.onerror = (e) => {\n        console.error('音频 WebSocket 错误', e);\n      };\n\n      this.wsAudio.onclose = () => {\n        console.log('音频 WebSocket 已关闭');\n        this.stopAllAudio();\n        this.isPlayingAudio = false;\n      };\n    },\n    // 新增方法：连续播放音频队列\n    playAudioQueue() {\n      if (this.audioQueue.length === 0) {\n        this.isPlayingAudio = false;\n        return;\n      }\n      \n      this.isPlayingAudio = true;\n      const audioBuffer = this.audioQueue.shift();\n      \n      const source = this.audioCtx.createBufferSource();\n      source.buffer = audioBuffer;\n      source.connect(this.audioCtx.destination);\n      \n      // 计算播放时间，确保连续播放\n      const currentTime = this.audioCtx.currentTime;\n      const startTime = Math.max(currentTime, this.nextPlayTime);\n      \n      source.onended = () => {\n        // 从播放列表中移除\n        const idx = this.audioPlayingNodes.indexOf(source);\n        if (idx !== -1) this.audioPlayingNodes.splice(idx, 1);\n        \n        // 继续播放队列中的下一个音频块\n        setTimeout(() => this.playAudioQueue(), 10); // 小延迟防止卡顿\n      };\n      \n      this.audioPlayingNodes.push(source);\n      source.start(startTime);\n      \n      // 更新下次播放时间\n      this.nextPlayTime = startTime + audioBuffer.duration;\n      \n      console.log(`播放音频块，时长: ${audioBuffer.duration.toFixed(3)}秒，开始时间: ${startTime.toFixed(3)}秒`);\n    },\n    stopAllAudio() {\n      // 停止所有正在播放的音频\n      this.audioPlayingNodes.forEach(node => {\n        try {\n          node.stop();\n        } catch (e) {\n          console.error('停止音频节点失败:', e);\n        }\n      });\n      this.audioPlayingNodes = [];\n      \n      // 清空队列\n      this.audioQueue = [];\n      this.isPlayingAudio = false;\n      this.nextPlayTime = 0;\n      \n      console.log('所有音频已停止，队列已清空');\n    }\n  },\n  mounted() {\n    // 监听用户交互，保证 AudioContext 激活\n    window.addEventListener('click', () => {\n      if (!this.userInteracted) {\n        this.resumeAudioContext();\n        this.userInteracted = true;\n      }\n    }, { once: true });\n\n    this.setupTextSocket();\n    this.setupAudioSocket();\n  },\n  beforeDestroy() {\n    if (this.wsText) this.wsText.close();\n    if (this.wsAudio) this.wsAudio.close();\n    this.stopAllAudio();\n    if (this.audioCtx) this.audioCtx.close();\n  }\n};\n</script>\n\n<style scoped>\ninput {\n  margin-right: 8px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}