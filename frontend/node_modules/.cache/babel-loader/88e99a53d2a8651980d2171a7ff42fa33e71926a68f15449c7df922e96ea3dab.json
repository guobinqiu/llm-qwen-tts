{"ast":null,"code":"export default {\n  data() {\n    return {\n      textMessage: '',\n      // 输入的文本消息\n      textResponse: '',\n      // 后端返回的文本响应\n      audioData: null,\n      // 音频数据\n      audioPlaying: false,\n      // 控制音频是否播放\n      sessionID: 'sess1',\n      // 假设的会话 ID\n      textSocket: null,\n      // 文本 WebSocket 连接\n      audioSocket: null // 音频 WebSocket 连接\n    };\n  },\n  methods: {\n    // 发送文本消息\n    sendTextMessage() {\n      if (this.textMessage.trim()) {\n        // 发送文本消息给后端，sessionid 通过 URL 传递\n        this.textSocket.send(this.textMessage);\n        this.textMessage = ''; // 清空输入框\n      }\n    },\n    // 启动音频流\n    startAudioStream() {\n      this.audioPlaying = true;\n      this.audioSocket.send('start'); // 通知后端开始音频流\n    },\n    // 停止音频流\n    stopAudioStream() {\n      this.audioPlaying = false;\n      this.audioSocket.send('stop'); // 通知后端停止音频流\n      this.audioData = null; // 停止音频播放\n    },\n    // 监听文本流响应\n    listenForTextResponse() {\n      this.textSocket.onmessage = event => {\n        console.log(\"收到文本响应:\", event.data); // 输出接收到的文本响应\n        this.textResponse = event.data;\n      };\n    },\n    // 监听音频流响应\n    listenForAudioResponse() {\n      this.audioSocket.onmessage = event => {\n        console.log(\"收到音频响应:\", event.data); // 输出接收到的音频数据\n        const audioBase64 = event.data;\n        this.audioData = `data:audio/wav;base64,${audioBase64}`;\n      };\n    },\n    // 初始化 WebSocket 连接\n    initWebSockets() {\n      // 文本 WebSocket 连接，sessionid 通过 URL 传递\n      this.textSocket = new WebSocket(`ws://localhost:8080/ws/text-stream?sessionid=${this.sessionID}`);\n      this.textSocket.onopen = () => {\n        console.log('文本流 WebSocket 连接已建立');\n        this.listenForTextResponse();\n      };\n\n      // 音频 WebSocket 连接，sessionid 通过 URL 传递\n      this.audioSocket = new WebSocket(`ws://localhost:8080/ws/audio-stream?sessionid=${this.sessionID}`);\n      this.audioSocket.onopen = () => {\n        console.log('音频流 WebSocket 连接已建立');\n        this.listenForAudioResponse();\n      };\n    }\n  },\n  mounted() {\n    this.initWebSockets(); // 初始化 WebSocket 连接\n  },\n  beforeDestroy() {\n    // 关闭 WebSocket 连接\n    if (this.textSocket) {\n      this.textSocket.close();\n    }\n    if (this.audioSocket) {\n      this.audioSocket.close();\n    }\n  }\n};","map":{"version":3,"names":["data","textMessage","textResponse","audioData","audioPlaying","sessionID","textSocket","audioSocket","methods","sendTextMessage","trim","send","startAudioStream","stopAudioStream","listenForTextResponse","onmessage","event","console","log","listenForAudioResponse","audioBase64","initWebSockets","WebSocket","onopen","mounted","beforeDestroy","close"],"sources":["src/components/ChatPage.vue"],"sourcesContent":["<template>\n  <div>\n    <!-- 输入文本消息 -->\n    <div>\n      <input v-model=\"textMessage\" @keyup.enter=\"sendTextMessage\" placeholder=\"输入消息...\" />\n      <button @click=\"sendTextMessage\">发送文本消息</button>\n    </div>\n\n    <!-- 显示文本消息 -->\n    <div v-if=\"textResponse\">\n      <h3>文本响应：</h3>\n      <p>{{ textResponse }}</p>\n    </div>\n\n    <!-- 控制音频流播放 -->\n    <div v-if=\"textResponse\">\n      <button @click=\"startAudioStream\" :disabled=\"audioPlaying\">播放音频</button>\n      <button @click=\"stopAudioStream\" :disabled=\"!audioPlaying\">停止音频</button>\n    </div>\n\n    <!-- 显示音频流 -->\n    <div v-if=\"audioData\">\n      <h3>音频响应：</h3>\n      <audio ref=\"audioPlayer\" :src=\"audioData\" controls autoplay></audio>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      textMessage: '',        // 输入的文本消息\n      textResponse: '',       // 后端返回的文本响应\n      audioData: null,        // 音频数据\n      audioPlaying: false,    // 控制音频是否播放\n      sessionID: 'sess1',     // 假设的会话 ID\n      textSocket: null,       // 文本 WebSocket 连接\n      audioSocket: null,      // 音频 WebSocket 连接\n    };\n  },\n  methods: {\n    // 发送文本消息\n    sendTextMessage() {\n      if (this.textMessage.trim()) {\n        // 发送文本消息给后端，sessionid 通过 URL 传递\n        this.textSocket.send(this.textMessage); \n        this.textMessage = '';  // 清空输入框\n      }\n    },\n\n    // 启动音频流\n    startAudioStream() {\n      this.audioPlaying = true;\n      this.audioSocket.send('start');  // 通知后端开始音频流\n    },\n\n    // 停止音频流\n    stopAudioStream() {\n      this.audioPlaying = false;\n      this.audioSocket.send('stop');  // 通知后端停止音频流\n      this.audioData = null;  // 停止音频播放\n    },\n\n    // 监听文本流响应\n    listenForTextResponse() {\n      this.textSocket.onmessage = (event) => {\n        console.log(\"收到文本响应:\", event.data);  // 输出接收到的文本响应\n        this.textResponse = event.data;\n      };\n    },\n\n    // 监听音频流响应\n    listenForAudioResponse() {\n      this.audioSocket.onmessage = (event) => {\n        console.log(\"收到音频响应:\", event.data);  // 输出接收到的音频数据\n        const audioBase64 = event.data;\n        this.audioData = `data:audio/wav;base64,${audioBase64}`;\n      };\n    },\n\n    // 初始化 WebSocket 连接\n    initWebSockets() {\n      // 文本 WebSocket 连接，sessionid 通过 URL 传递\n      this.textSocket = new WebSocket(`ws://localhost:8080/ws/text-stream?sessionid=${this.sessionID}`);\n      this.textSocket.onopen = () => {\n        console.log('文本流 WebSocket 连接已建立');\n        this.listenForTextResponse();\n      };\n\n      // 音频 WebSocket 连接，sessionid 通过 URL 传递\n      this.audioSocket = new WebSocket(`ws://localhost:8080/ws/audio-stream?sessionid=${this.sessionID}`);\n      this.audioSocket.onopen = () => {\n        console.log('音频流 WebSocket 连接已建立');\n        this.listenForAudioResponse();\n      };\n    }\n  },\n\n  mounted() {\n    this.initWebSockets();  // 初始化 WebSocket 连接\n  },\n\n  beforeDestroy() {\n    // 关闭 WebSocket 连接\n    if (this.textSocket) {\n      this.textSocket.close();\n    }\n    if (this.audioSocket) {\n      this.audioSocket.close();\n    }\n  }\n}\n</script>\n\n<style scoped>\nh1 {\n  text-align: center;\n}\n\nbutton {\n  margin: 10px;\n  padding: 10px 20px;\n}\n\ninput {\n  padding: 10px;\n  width: 300px;\n}\n\ndiv {\n  margin: 20px;\n}\n</style>\n"],"mappings":"AA6BA;EACAA,KAAA;IACA;MACAC,WAAA;MAAA;MACAC,YAAA;MAAA;MACAC,SAAA;MAAA;MACAC,YAAA;MAAA;MACAC,SAAA;MAAA;MACAC,UAAA;MAAA;MACAC,WAAA;IACA;EACA;EACAC,OAAA;IACA;IACAC,gBAAA;MACA,SAAAR,WAAA,CAAAS,IAAA;QACA;QACA,KAAAJ,UAAA,CAAAK,IAAA,MAAAV,WAAA;QACA,KAAAA,WAAA;MACA;IACA;IAEA;IACAW,iBAAA;MACA,KAAAR,YAAA;MACA,KAAAG,WAAA,CAAAI,IAAA;IACA;IAEA;IACAE,gBAAA;MACA,KAAAT,YAAA;MACA,KAAAG,WAAA,CAAAI,IAAA;MACA,KAAAR,SAAA;IACA;IAEA;IACAW,sBAAA;MACA,KAAAR,UAAA,CAAAS,SAAA,GAAAC,KAAA;QACAC,OAAA,CAAAC,GAAA,YAAAF,KAAA,CAAAhB,IAAA;QACA,KAAAE,YAAA,GAAAc,KAAA,CAAAhB,IAAA;MACA;IACA;IAEA;IACAmB,uBAAA;MACA,KAAAZ,WAAA,CAAAQ,SAAA,GAAAC,KAAA;QACAC,OAAA,CAAAC,GAAA,YAAAF,KAAA,CAAAhB,IAAA;QACA,MAAAoB,WAAA,GAAAJ,KAAA,CAAAhB,IAAA;QACA,KAAAG,SAAA,4BAAAiB,WAAA;MACA;IACA;IAEA;IACAC,eAAA;MACA;MACA,KAAAf,UAAA,OAAAgB,SAAA,sDAAAjB,SAAA;MACA,KAAAC,UAAA,CAAAiB,MAAA;QACAN,OAAA,CAAAC,GAAA;QACA,KAAAJ,qBAAA;MACA;;MAEA;MACA,KAAAP,WAAA,OAAAe,SAAA,uDAAAjB,SAAA;MACA,KAAAE,WAAA,CAAAgB,MAAA;QACAN,OAAA,CAAAC,GAAA;QACA,KAAAC,sBAAA;MACA;IACA;EACA;EAEAK,QAAA;IACA,KAAAH,cAAA;EACA;EAEAI,cAAA;IACA;IACA,SAAAnB,UAAA;MACA,KAAAA,UAAA,CAAAoB,KAAA;IACA;IACA,SAAAnB,WAAA;MACA,KAAAA,WAAA,CAAAmB,KAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}