{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nexport default {\n  data() {\n    return {\n      textMessage: '',\n      messages: [],\n      currentAIChunk: '',\n      sessionID: 'sess1',\n      textSocket: null,\n      audioSocket: null,\n      mediaSource: null,\n      sourceBuffer: null,\n      audioPlaying: false,\n      audioQueue: [],\n      // 缓冲区，存放二进制音频块\n      audioStarted: false\n    };\n  },\n  computed: {\n    showMessages() {\n      if (this.currentAIChunk) {\n        return [...this.messages, {\n          role: 'assistant',\n          content: this.currentAIChunk\n        }];\n      }\n      return this.messages;\n    }\n  },\n  methods: {\n    sendTextMessage() {\n      if (!this.textMessage.trim()) return;\n      if (!this.textSocket || this.textSocket.readyState !== WebSocket.OPEN) {\n        alert('文本连接未建立');\n        return;\n      }\n      this.messages.push({\n        role: 'user',\n        content: this.textMessage.trim()\n      });\n      this.textSocket.send(this.textMessage.trim());\n      this.textMessage = '';\n      this.currentAIChunk = '';\n    },\n    initTextSocket() {\n      this.textSocket = new WebSocket(`ws://localhost:8080/ws/text-stream?sessionid=${this.sessionID}`);\n      this.textSocket.onopen = () => {\n        console.log('文本 WebSocket 已连接');\n      };\n      this.textSocket.onmessage = event => {\n        const data = event.data;\n        if (data === '\\n\\n') {\n          // 一轮回复结束，保存消息\n          this.messages.push({\n            role: 'assistant',\n            content: this.currentAIChunk\n          });\n          this.currentAIChunk = '';\n          // 自动启动音频流播放\n          this.startAudioStream();\n        } else {\n          this.currentAIChunk += data;\n        }\n      };\n      this.textSocket.onerror = e => {\n        console.error('文本 WebSocket 错误:', e);\n      };\n      this.textSocket.onclose = () => {\n        console.log('文本 WebSocket 已关闭');\n      };\n    },\n    initAudioSocket() {\n      this.audioSocket = new WebSocket(`ws://localhost:8080/ws/audio-stream?sessionid=${this.sessionID}`);\n      this.audioSocket.binaryType = 'arraybuffer'; // 确保二进制传输\n\n      this.audioSocket.onopen = () => {\n        console.log('音频 WebSocket 已连接');\n        this.audioStarted = true;\n        this.setupMediaSource();\n      };\n      this.audioSocket.onerror = e => {\n        console.error('音频 WebSocket 错误:', e);\n      };\n      this.audioSocket.onclose = () => {\n        console.log('音频 WebSocket 已关闭');\n        this.audioStarted = false;\n      };\n      this.audioSocket.onmessage = event => {\n        if (!this.sourceBuffer || this.sourceBuffer.updating) {\n          // 如果 sourceBuffer 未准备好，先缓存\n          this.audioQueue.push(event.data);\n          return;\n        }\n        this.appendAudioBuffer(event.data);\n      };\n    },\n    startAudioStream() {\n      if (!this.audioSocket || this.audioSocket.readyState !== WebSocket.OPEN) {\n        console.log('音频连接未建立，重新连接中...');\n        this.initAudioSocket();\n        return;\n      }\n      this.audioPlaying = true;\n      this.audioQueue = [];\n      this.audioSocket.send('start');\n    },\n    appendAudioBuffer(chunk) {\n      try {\n        this.sourceBuffer.appendBuffer(chunk);\n      } catch (e) {\n        console.error('appendBuffer错误:', e);\n      }\n    },\n    setupMediaSource() {\n      if (this.mediaSource) {\n        this.mediaSource.removeEventListener('sourceopen', this.onSourceOpen);\n        this.mediaSource = null;\n        this.sourceBuffer = null;\n      }\n      this.mediaSource = new MediaSource();\n      const audio = this.$refs.audioPlayer;\n      audio.src = URL.createObjectURL(this.mediaSource);\n      this.mediaSource.addEventListener('sourceopen', this.onSourceOpen);\n      audio.play();\n    },\n    onSourceOpen() {\n      URL.revokeObjectURL(this.$refs.audioPlayer.src);\n      const mime = 'audio/webm; codecs=opus'; // 根据后端音频格式调整\n      this.sourceBuffer = this.mediaSource.addSourceBuffer(mime);\n      this.sourceBuffer.mode = 'sequence';\n      this.sourceBuffer.addEventListener('updateend', () => {\n        // 追加缓冲区中缓存的数据\n        if (this.audioQueue.length > 0 && !this.sourceBuffer.updating) {\n          const chunk = this.audioQueue.shift();\n          this.appendAudioBuffer(chunk);\n        }\n      });\n\n      // 先尝试缓冲队列第一个数据\n      if (this.audioQueue.length > 0) {\n        const chunk = this.audioQueue.shift();\n        this.appendAudioBuffer(chunk);\n      }\n    },\n    stopAudioStream() {\n      if (!this.audioSocket || this.audioSocket.readyState !== WebSocket.OPEN) return;\n      this.audioPlaying = false;\n      this.audioSocket.send('stop');\n      this.audioQueue = [];\n      this.currentAIChunk = '';\n      if (this.mediaSource) {\n        this.mediaSource.endOfStream();\n      }\n    }\n  },\n  mounted() {\n    this.initTextSocket();\n    this.initAudioSocket();\n  },\n  beforeDestroy() {\n    if (this.textSocket) this.textSocket.close();\n    if (this.audioSocket) this.audioSocket.close();\n  }\n};","map":{"version":3,"names":["data","textMessage","messages","currentAIChunk","sessionID","textSocket","audioSocket","mediaSource","sourceBuffer","audioPlaying","audioQueue","audioStarted","computed","showMessages","role","content","methods","sendTextMessage","trim","readyState","WebSocket","OPEN","alert","push","send","initTextSocket","onopen","console","log","onmessage","event","startAudioStream","onerror","e","error","onclose","initAudioSocket","binaryType","setupMediaSource","updating","appendAudioBuffer","chunk","appendBuffer","removeEventListener","onSourceOpen","MediaSource","audio","$refs","audioPlayer","src","URL","createObjectURL","addEventListener","play","revokeObjectURL","mime","addSourceBuffer","mode","length","shift","stopAudioStream","endOfStream","mounted","beforeDestroy","close"],"sources":["src/components/ChatPage.vue"],"sourcesContent":["<template>\n  <div id=\"chat\">\n    <div style=\"margin-bottom: 10px;\">\n      <input\n        v-model=\"textMessage\"\n        @keyup.enter=\"sendTextMessage\"\n        placeholder=\"输入消息后回车或点击发送\"\n        style=\"width: 300px; padding: 6px;\"\n      />\n      <button @click=\"sendTextMessage\">发送</button>\n    </div>\n\n    <div style=\"max-height: 400px; overflow-y: auto; border: 1px solid #ccc; padding: 10px;\">\n      <div\n        v-for=\"(msg, idx) in showMessages\"\n        :key=\"idx\"\n        :style=\"{ color: msg.role === 'user' ? 'blue' : 'black', marginBottom: '8px' }\"\n      >\n        <b>{{ msg.role }}:</b> {{ msg.content }}\n      </div>\n    </div>\n\n    <!-- 这是隐藏的 audio 标签，绑定了 MediaSource 播放 -->\n    <audio ref=\"audioPlayer\" controls autoplay style=\"display:none;\"></audio>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      textMessage: '',\n      messages: [],\n      currentAIChunk: '',\n      sessionID: 'sess1',\n\n      textSocket: null,\n      audioSocket: null,\n      mediaSource: null,\n      sourceBuffer: null,\n      audioPlaying: false,\n      audioQueue: [], // 缓冲区，存放二进制音频块\n      audioStarted: false,\n    };\n  },\n  computed: {\n    showMessages() {\n      if (this.currentAIChunk) {\n        return [...this.messages, { role: 'assistant', content: this.currentAIChunk }];\n      }\n      return this.messages;\n    },\n  },\n  methods: {\n    sendTextMessage() {\n      if (!this.textMessage.trim()) return;\n      if (!this.textSocket || this.textSocket.readyState !== WebSocket.OPEN) {\n        alert('文本连接未建立');\n        return;\n      }\n      this.messages.push({ role: 'user', content: this.textMessage.trim() });\n      this.textSocket.send(this.textMessage.trim());\n      this.textMessage = '';\n      this.currentAIChunk = '';\n    },\n\n    initTextSocket() {\n      this.textSocket = new WebSocket(`ws://localhost:8080/ws/text-stream?sessionid=${this.sessionID}`);\n\n      this.textSocket.onopen = () => {\n        console.log('文本 WebSocket 已连接');\n      };\n\n      this.textSocket.onmessage = (event) => {\n        const data = event.data;\n        if (data === '\\n\\n') {\n          // 一轮回复结束，保存消息\n          this.messages.push({ role: 'assistant', content: this.currentAIChunk });\n          this.currentAIChunk = '';\n          // 自动启动音频流播放\n          this.startAudioStream();\n        } else {\n          this.currentAIChunk += data;\n        }\n      };\n\n      this.textSocket.onerror = (e) => {\n        console.error('文本 WebSocket 错误:', e);\n      };\n\n      this.textSocket.onclose = () => {\n        console.log('文本 WebSocket 已关闭');\n      };\n    },\n\n    initAudioSocket() {\n      this.audioSocket = new WebSocket(`ws://localhost:8080/ws/audio-stream?sessionid=${this.sessionID}`);\n      this.audioSocket.binaryType = 'arraybuffer'; // 确保二进制传输\n\n      this.audioSocket.onopen = () => {\n        console.log('音频 WebSocket 已连接');\n        this.audioStarted = true;\n        this.setupMediaSource();\n      };\n\n      this.audioSocket.onerror = (e) => {\n        console.error('音频 WebSocket 错误:', e);\n      };\n\n      this.audioSocket.onclose = () => {\n        console.log('音频 WebSocket 已关闭');\n        this.audioStarted = false;\n      };\n\n      this.audioSocket.onmessage = (event) => {\n        if (!this.sourceBuffer || this.sourceBuffer.updating) {\n          // 如果 sourceBuffer 未准备好，先缓存\n          this.audioQueue.push(event.data);\n          return;\n        }\n        this.appendAudioBuffer(event.data);\n      };\n    },\n\n    startAudioStream() {\n      if (!this.audioSocket || this.audioSocket.readyState !== WebSocket.OPEN) {\n        console.log('音频连接未建立，重新连接中...');\n        this.initAudioSocket();\n        return;\n      }\n      this.audioPlaying = true;\n      this.audioQueue = [];\n      this.audioSocket.send('start');\n    },\n\n    appendAudioBuffer(chunk) {\n      try {\n        this.sourceBuffer.appendBuffer(chunk);\n      } catch (e) {\n        console.error('appendBuffer错误:', e);\n      }\n    },\n\n    setupMediaSource() {\n      if (this.mediaSource) {\n        this.mediaSource.removeEventListener('sourceopen', this.onSourceOpen);\n        this.mediaSource = null;\n        this.sourceBuffer = null;\n      }\n      this.mediaSource = new MediaSource();\n      const audio = this.$refs.audioPlayer;\n      audio.src = URL.createObjectURL(this.mediaSource);\n\n      this.mediaSource.addEventListener('sourceopen', this.onSourceOpen);\n      audio.play();\n    },\n\n    onSourceOpen() {\n      URL.revokeObjectURL(this.$refs.audioPlayer.src);\n      const mime = 'audio/webm; codecs=opus'; // 根据后端音频格式调整\n      this.sourceBuffer = this.mediaSource.addSourceBuffer(mime);\n\n      this.sourceBuffer.mode = 'sequence';\n      this.sourceBuffer.addEventListener('updateend', () => {\n        // 追加缓冲区中缓存的数据\n        if (this.audioQueue.length > 0 && !this.sourceBuffer.updating) {\n          const chunk = this.audioQueue.shift();\n          this.appendAudioBuffer(chunk);\n        }\n      });\n\n      // 先尝试缓冲队列第一个数据\n      if (this.audioQueue.length > 0) {\n        const chunk = this.audioQueue.shift();\n        this.appendAudioBuffer(chunk);\n      }\n    },\n\n    stopAudioStream() {\n      if (!this.audioSocket || this.audioSocket.readyState !== WebSocket.OPEN) return;\n      this.audioPlaying = false;\n      this.audioSocket.send('stop');\n      this.audioQueue = [];\n      this.currentAIChunk = '';\n      if (this.mediaSource) {\n        this.mediaSource.endOfStream();\n      }\n    },\n  },\n\n  mounted() {\n    this.initTextSocket();\n    this.initAudioSocket();\n  },\n\n  beforeDestroy() {\n    if (this.textSocket) this.textSocket.close();\n    if (this.audioSocket) this.audioSocket.close();\n  },\n};\n</script>\n\n<style scoped>\n#chat {\n  max-width: 600px;\n  margin: 20px auto;\n  font-family: Arial, sans-serif;\n}\n\nbutton {\n  padding: 6px 12px;\n  margin-right: 8px;\n  cursor: pointer;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}