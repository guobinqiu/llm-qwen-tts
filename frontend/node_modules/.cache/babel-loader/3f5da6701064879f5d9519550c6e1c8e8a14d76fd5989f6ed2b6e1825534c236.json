{"ast":null,"code":"import \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport \"core-js/modules/web.dom-exception.stack.js\";\nexport default {\n  data() {\n    return {\n      textMessage: '',\n      textResponse: '',\n      audioData: null,\n      audioPlaying: false,\n      sessionID: 'sess1',\n      textSocket: null,\n      audioSocket: null,\n      audioContext: null\n    };\n  },\n  methods: {\n    sendTextMessage() {\n      if (this.textMessage.trim()) {\n        this.textSocket.send(this.textMessage);\n        this.textMessage = '';\n      }\n    },\n    startAudioStream() {\n      this.audioPlaying = true;\n      this.audioSocket.send('start');\n    },\n    stopAudioStream() {\n      this.audioPlaying = false;\n      this.audioSocket.send('stop');\n      this.audioData = null;\n    },\n    listenForTextResponse() {\n      this.textSocket.onmessage = event => {\n        this.textResponse = event.data;\n      };\n    },\n    listenForAudioResponse() {\n      this.audioSocket.onmessage = async event => {\n        console.log('收到音频数据:', event.data);\n        if (event.data instanceof ArrayBuffer) {\n          const audioBase64 = this.arrayBufferToBase64(event.data);\n          this.appendAudioBuffer(audioBase64);\n        } else if (event.data instanceof Blob) {\n          try {\n            const audioBase64 = await this.blobToBase64(event.data);\n            this.appendAudioBuffer(audioBase64);\n          } catch (error) {\n            console.error('Blob 转换为 Base64 失败:', error);\n          }\n        } else if (typeof event.data === 'string') {\n          const audioBase64 = event.data;\n          this.appendAudioBuffer(audioBase64);\n        } else {\n          console.error('音频数据格式不支持');\n        }\n      };\n    },\n    initWebSockets() {\n      this.textSocket = new WebSocket(`ws://localhost:8080/ws/text-stream?sessionid=${this.sessionID}`);\n      this.textSocket.onopen = () => {\n        this.listenForTextResponse();\n      };\n      this.audioSocket = new WebSocket(`ws://localhost:8080/ws/audio-stream?sessionid=${this.sessionID}`);\n      this.audioSocket.onopen = () => {\n        this.listenForAudioResponse();\n      };\n    },\n    initAudioContext() {\n      this.audioContext = new (window.AudioContext || window.webkitAudioContext)();\n    },\n    appendAudioBuffer(base64Audio) {\n      if (!this.audioContext) return;\n      const audioBytes = this.decodeBase64(base64Audio);\n      this.audioContext.decodeAudioData(audioBytes.buffer, buffer => {\n        const source = this.audioContext.createBufferSource();\n        source.buffer = buffer;\n        source.connect(this.audioContext.destination);\n        source.start();\n      });\n    },\n    decodeBase64(base64String) {\n      const cleanedBase64 = base64String.replace(/[^A-Za-z0-9+/=]/g, '');\n      try {\n        const binaryString = atob(cleanedBase64);\n        const byteArray = new Uint8Array(binaryString.length);\n        for (let i = 0; i < binaryString.length; i++) {\n          byteArray[i] = binaryString.charCodeAt(i);\n        }\n        return byteArray;\n      } catch (e) {\n        console.error('Base64 解码失败:', e);\n        return new Uint8Array();\n      }\n    },\n    arrayBufferToBase64(buffer) {\n      const byteArray = new Uint8Array(buffer);\n      let binary = '';\n      byteArray.forEach(byte => {\n        binary += String.fromCharCode(byte);\n      });\n      return window.btoa(binary);\n    },\n    blobToBase64(blob) {\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onloadend = function () {\n          resolve(reader.result.split(',')[1]);\n        };\n        reader.onerror = reject;\n        reader.readAsDataURL(blob);\n      });\n    }\n  },\n  mounted() {\n    this.initAudioContext();\n    this.initWebSockets();\n  },\n  beforeDestroy() {\n    if (this.textSocket) {\n      this.textSocket.close();\n    }\n    if (this.audioSocket) {\n      this.audioSocket.close();\n    }\n    if (this.audioContext) {\n      this.audioContext.close();\n    }\n  }\n};","map":{"version":3,"names":["data","textMessage","textResponse","audioData","audioPlaying","sessionID","textSocket","audioSocket","audioContext","methods","sendTextMessage","trim","send","startAudioStream","stopAudioStream","listenForTextResponse","onmessage","event","listenForAudioResponse","console","log","ArrayBuffer","audioBase64","arrayBufferToBase64","appendAudioBuffer","Blob","blobToBase64","error","initWebSockets","WebSocket","onopen","initAudioContext","window","AudioContext","webkitAudioContext","base64Audio","audioBytes","decodeBase64","decodeAudioData","buffer","source","createBufferSource","connect","destination","start","base64String","cleanedBase64","replace","binaryString","atob","byteArray","Uint8Array","length","i","charCodeAt","e","binary","forEach","byte","String","fromCharCode","btoa","blob","Promise","resolve","reject","reader","FileReader","onloadend","result","split","onerror","readAsDataURL","mounted","beforeDestroy","close"],"sources":["src/components/ChatPage.vue"],"sourcesContent":["<template>\n  <div>\n    <!-- 输入文本消息 -->\n    <div>\n      <input v-model=\"textMessage\" @keyup.enter=\"sendTextMessage\" placeholder=\"输入消息...\" />\n      <button @click=\"sendTextMessage\">发送文本消息</button>\n    </div>\n\n    <!-- 显示文本消息 -->\n    <div v-if=\"textResponse\">\n      <h3>文本响应：</h3>\n      <p>{{ textResponse }}</p>\n    </div>\n\n    <!-- 控制音频流播放 -->\n    <div v-if=\"textResponse\">\n      <button @click=\"startAudioStream\" :disabled=\"audioPlaying\">播放音频</button>\n      <button @click=\"stopAudioStream\" :disabled=\"!audioPlaying\">停止音频</button>\n    </div>\n\n    <!-- 音频播放 -->\n    <div v-if=\"audioPlaying\">\n      <h3>音频响应：</h3>\n      <p>音频正在播放...</p>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      textMessage: '',\n      textResponse: '',\n      audioData: null,\n      audioPlaying: false,\n      sessionID: 'sess1',\n      textSocket: null,\n      audioSocket: null,\n      audioContext: null,\n    };\n  },\n  methods: {\n    sendTextMessage() {\n      if (this.textMessage.trim()) {\n        this.textSocket.send(this.textMessage);\n        this.textMessage = '';\n      }\n    },\n\n    startAudioStream() {\n      this.audioPlaying = true;\n      this.audioSocket.send('start');\n    },\n\n    stopAudioStream() {\n      this.audioPlaying = false;\n      this.audioSocket.send('stop');\n      this.audioData = null;\n    },\n\n    listenForTextResponse() {\n      this.textSocket.onmessage = (event) => {\n        this.textResponse = event.data;\n      };\n    },\n\n    listenForAudioResponse() {\n      this.audioSocket.onmessage = async (event) => {\n        console.log('收到音频数据:', event.data);\n        if (event.data instanceof ArrayBuffer) {\n          const audioBase64 = this.arrayBufferToBase64(event.data);\n          this.appendAudioBuffer(audioBase64);\n        } else if (event.data instanceof Blob) {\n          try {\n            const audioBase64 = await this.blobToBase64(event.data);\n            this.appendAudioBuffer(audioBase64);\n          } catch (error) {\n            console.error('Blob 转换为 Base64 失败:', error);\n          }\n        } else if (typeof event.data === 'string') {\n          const audioBase64 = event.data;\n          this.appendAudioBuffer(audioBase64);\n        } else {\n          console.error('音频数据格式不支持');\n        }\n      };\n    },\n\n    initWebSockets() {\n      this.textSocket = new WebSocket(`ws://localhost:8080/ws/text-stream?sessionid=${this.sessionID}`);\n      this.textSocket.onopen = () => {\n        this.listenForTextResponse();\n      };\n\n      this.audioSocket = new WebSocket(`ws://localhost:8080/ws/audio-stream?sessionid=${this.sessionID}`);\n      this.audioSocket.onopen = () => {\n        this.listenForAudioResponse();\n      };\n    },\n\n    initAudioContext() {\n      this.audioContext = new (window.AudioContext || window.webkitAudioContext)();\n    },\n\n    appendAudioBuffer(base64Audio) {\n      if (!this.audioContext) return;\n\n      const audioBytes = this.decodeBase64(base64Audio);\n      this.audioContext.decodeAudioData(audioBytes.buffer, (buffer) => {\n        const source = this.audioContext.createBufferSource();\n        source.buffer = buffer;\n        source.connect(this.audioContext.destination);\n        source.start();\n      });\n    },\n\n    decodeBase64(base64String) {\n      const cleanedBase64 = base64String.replace(/[^A-Za-z0-9+/=]/g, '');\n      try {\n        const binaryString = atob(cleanedBase64);\n        const byteArray = new Uint8Array(binaryString.length);\n        for (let i = 0; i < binaryString.length; i++) {\n          byteArray[i] = binaryString.charCodeAt(i);\n        }\n        return byteArray;\n      } catch (e) {\n        console.error('Base64 解码失败:', e);\n        return new Uint8Array();\n      }\n    },\n\n    arrayBufferToBase64(buffer) {\n      const byteArray = new Uint8Array(buffer);\n      let binary = '';\n      byteArray.forEach((byte) => {\n        binary += String.fromCharCode(byte);\n      });\n      return window.btoa(binary);\n    },\n\n    blobToBase64(blob) {\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onloadend = function () {\n          resolve(reader.result.split(',')[1]);\n        };\n        reader.onerror = reject;\n        reader.readAsDataURL(blob);\n      });\n    },\n  },\n\n  mounted() {\n    this.initAudioContext();\n    this.initWebSockets();\n  },\n\n  beforeDestroy() {\n    if (this.textSocket) {\n      this.textSocket.close();\n    }\n    if (this.audioSocket) {\n      this.audioSocket.close();\n    }\n    if (this.audioContext) {\n      this.audioContext.close();\n    }\n  }\n}\n\n</script>\n\n<style scoped>\nh1 {\n  text-align: center;\n}\n\nbutton {\n  margin: 10px;\n  padding: 10px 20px;\n}\n\ninput {\n  padding: 10px;\n  width: 300px;\n}\n\ndiv {\n  margin: 20px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}