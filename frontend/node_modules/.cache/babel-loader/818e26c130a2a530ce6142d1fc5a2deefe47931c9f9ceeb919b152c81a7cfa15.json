{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport \"core-js/modules/web.dom-exception.stack.js\";\nexport default {\n  data() {\n    return {\n      textMessage: '',\n      textResponse: '',\n      audioPlaying: false,\n      sessionID: 'sess1',\n      // 你自己设置\n      textSocket: null,\n      audioSocket: null,\n      audioContext: null,\n      audioSources: [] // 用来保存当前播放的AudioBufferSourceNode\n    };\n  },\n  methods: {\n    sendTextMessage() {\n      if (!this.textMessage.trim()) return;\n      this.textSocket.send(this.textMessage);\n      this.textMessage = '';\n    },\n    startAudioStream() {\n      this.audioPlaying = true;\n      this.audioSocket.send('start'); // 你后端需要识别这个信号\n    },\n    stopAudioStream() {\n      this.audioPlaying = false;\n      this.audioSocket.send('stop'); // 停止信号\n      this.stopAllAudio();\n    },\n    stopAllAudio() {\n      this.audioSources.forEach(source => {\n        try {\n          source.stop();\n        } catch (e) {\n          console.warn('Audio source stop error:', e);\n        }\n      });\n      this.audioSources = [];\n    },\n    listenForTextResponse() {\n      this.textSocket.onmessage = event => {\n        this.textResponse = event.data;\n      };\n    },\n    listenForAudioResponse() {\n      this.audioSocket.onmessage = event => {\n        // 这里假设收到的是Base64编码的16bit PCM裸流\n        let base64Audio = null;\n        if (typeof event.data === 'string') {\n          base64Audio = event.data;\n          this.appendPCMBuffer(base64Audio);\n        } else if (event.data instanceof Blob) {\n          const reader = new FileReader();\n          reader.onloadend = () => {\n            const dataUrl = reader.result; // 形如 data:audio/wav;base64,...\n            const base64 = dataUrl.split(',')[1];\n            this.appendPCMBuffer(base64);\n          };\n          reader.readAsDataURL(event.data);\n        } else if (event.data instanceof ArrayBuffer) {\n          base64Audio = this.arrayBufferToBase64(event.data);\n          this.appendPCMBuffer(base64Audio);\n        } else {\n          console.error('未知音频数据格式', event.data);\n        }\n      };\n    },\n    initWebSockets() {\n      this.textSocket = new WebSocket(`ws://localhost:8080/ws/text-stream?sessionid=${this.sessionID}`);\n      this.textSocket.onopen = () => this.listenForTextResponse();\n      this.audioSocket = new WebSocket(`ws://localhost:8080/ws/audio-stream?sessionid=${this.sessionID}`);\n      this.audioSocket.onopen = () => this.listenForAudioResponse();\n    },\n    initAudioContext() {\n      this.audioContext = new (window.AudioContext || window.webkitAudioContext)();\n    },\n    // Base64 -> Uint8Array\n    decodeBase64(base64String) {\n      const cleanedBase64 = base64String.replace(/[^A-Za-z0-9+/=]/g, '');\n      try {\n        const binaryString = atob(cleanedBase64);\n        const byteArray = new Uint8Array(binaryString.length);\n        for (let i = 0; i < binaryString.length; i++) {\n          byteArray[i] = binaryString.charCodeAt(i);\n        }\n        return byteArray;\n      } catch (e) {\n        console.error('Base64 解码失败:', e);\n        return new Uint8Array();\n      }\n    },\n    // ArrayBuffer -> Base64\n    arrayBufferToBase64(buffer) {\n      let binary = '';\n      const bytes = new Uint8Array(buffer);\n      const len = bytes.byteLength;\n      for (let i = 0; i < len; i++) {\n        binary += String.fromCharCode(bytes[i]);\n      }\n      return window.btoa(binary);\n    },\n    // 关键：播放16bit PCM裸数据，采样率16kHz，单声道\n    appendPCMBuffer(base64PCM) {\n      if (!this.audioContext || !this.audioPlaying) return;\n      const pcmBytes = this.decodeBase64(base64PCM);\n      const pcmSamples = new Int16Array(pcmBytes.buffer);\n\n      // 转为 Float32Array，范围[-1, 1]\n      const floatSamples = new Float32Array(pcmSamples.length);\n      for (let i = 0; i < pcmSamples.length; i++) {\n        floatSamples[i] = pcmSamples[i] / 32768;\n      }\n\n      // 创建AudioBuffer\n      const audioBuffer = this.audioContext.createBuffer(1,\n      // 单声道\n      floatSamples.length, 16000 // 采样率\n      );\n      audioBuffer.getChannelData(0).set(floatSamples);\n\n      // 播放音频\n      const source = this.audioContext.createBufferSource();\n      source.buffer = audioBuffer;\n      source.connect(this.audioContext.destination);\n      source.start();\n\n      // 记录source，方便停止\n      this.audioSources.push(source);\n\n      // 播放结束时自动清理\n      source.onended = () => {\n        this.audioSources = this.audioSources.filter(s => s !== source);\n      };\n    }\n  },\n  mounted() {\n    this.initAudioContext();\n    this.initWebSockets();\n  },\n  beforeDestroy() {\n    if (this.textSocket) this.textSocket.close();\n    if (this.audioSocket) this.audioSocket.close();\n    if (this.audioContext) this.audioContext.close();\n  }\n};","map":{"version":3,"names":["data","textMessage","textResponse","audioPlaying","sessionID","textSocket","audioSocket","audioContext","audioSources","methods","sendTextMessage","trim","send","startAudioStream","stopAudioStream","stopAllAudio","forEach","source","stop","e","console","warn","listenForTextResponse","onmessage","event","listenForAudioResponse","base64Audio","appendPCMBuffer","Blob","reader","FileReader","onloadend","dataUrl","result","base64","split","readAsDataURL","ArrayBuffer","arrayBufferToBase64","error","initWebSockets","WebSocket","onopen","initAudioContext","window","AudioContext","webkitAudioContext","decodeBase64","base64String","cleanedBase64","replace","binaryString","atob","byteArray","Uint8Array","length","i","charCodeAt","buffer","binary","bytes","len","byteLength","String","fromCharCode","btoa","base64PCM","pcmBytes","pcmSamples","Int16Array","floatSamples","Float32Array","audioBuffer","createBuffer","getChannelData","set","createBufferSource","connect","destination","start","push","onended","filter","s","mounted","beforeDestroy","close"],"sources":["src/components/ChatPage.vue"],"sourcesContent":["<template>\n  <div>\n    <div>\n      <input v-model=\"textMessage\" @keyup.enter=\"sendTextMessage\" placeholder=\"输入消息...\" />\n      <button @click=\"sendTextMessage\">发送文本消息</button>\n    </div>\n\n    <div v-if=\"textResponse\">\n      <h3>文本响应：</h3>\n      <p>{{ textResponse }}</p>\n    </div>\n\n    <div v-if=\"textResponse\">\n      <button @click=\"startAudioStream\" :disabled=\"audioPlaying\">播放音频</button>\n      <button @click=\"stopAudioStream\" :disabled=\"!audioPlaying\">停止音频</button>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      textMessage: '',\n      textResponse: '',\n      audioPlaying: false,\n      sessionID: 'sess1',  // 你自己设置\n      textSocket: null,\n      audioSocket: null,\n      audioContext: null,\n      audioSources: [], // 用来保存当前播放的AudioBufferSourceNode\n    };\n  },\n\n  methods: {\n    sendTextMessage() {\n      if (!this.textMessage.trim()) return;\n      this.textSocket.send(this.textMessage);\n      this.textMessage = '';\n    },\n\n    startAudioStream() {\n      this.audioPlaying = true;\n      this.audioSocket.send('start'); // 你后端需要识别这个信号\n    },\n\n    stopAudioStream() {\n      this.audioPlaying = false;\n      this.audioSocket.send('stop'); // 停止信号\n      this.stopAllAudio();\n    },\n\n    stopAllAudio() {\n      this.audioSources.forEach(source => {\n        try { \n          source.stop(); \n        } catch (e) {\n          console.warn('Audio source stop error:', e);\n        }\n      });\n      this.audioSources = [];\n    },\n\n    listenForTextResponse() {\n      this.textSocket.onmessage = (event) => {\n        this.textResponse = event.data;\n      };\n    },\n\n    listenForAudioResponse() {\n      this.audioSocket.onmessage = (event) => {\n        // 这里假设收到的是Base64编码的16bit PCM裸流\n        let base64Audio = null;\n\n        if (typeof event.data === 'string') {\n          base64Audio = event.data;\n          this.appendPCMBuffer(base64Audio);\n        } else if (event.data instanceof Blob) {\n          const reader = new FileReader();\n          reader.onloadend = () => {\n            const dataUrl = reader.result; // 形如 data:audio/wav;base64,...\n            const base64 = dataUrl.split(',')[1];\n            this.appendPCMBuffer(base64);\n          };\n          reader.readAsDataURL(event.data);\n        } else if (event.data instanceof ArrayBuffer) {\n          base64Audio = this.arrayBufferToBase64(event.data);\n          this.appendPCMBuffer(base64Audio);\n        } else {\n          console.error('未知音频数据格式', event.data);\n        }\n      };\n    },\n\n    initWebSockets() {\n      this.textSocket = new WebSocket(`ws://localhost:8080/ws/text-stream?sessionid=${this.sessionID}`);\n      this.textSocket.onopen = () => this.listenForTextResponse();\n\n      this.audioSocket = new WebSocket(`ws://localhost:8080/ws/audio-stream?sessionid=${this.sessionID}`);\n      this.audioSocket.onopen = () => this.listenForAudioResponse();\n    },\n\n    initAudioContext() {\n      this.audioContext = new (window.AudioContext || window.webkitAudioContext)();\n    },\n\n    // Base64 -> Uint8Array\n    decodeBase64(base64String) {\n      const cleanedBase64 = base64String.replace(/[^A-Za-z0-9+/=]/g, '');\n      try {\n        const binaryString = atob(cleanedBase64);\n        const byteArray = new Uint8Array(binaryString.length);\n        for (let i = 0; i < binaryString.length; i++) {\n          byteArray[i] = binaryString.charCodeAt(i);\n        }\n        return byteArray;\n      } catch (e) {\n        console.error('Base64 解码失败:', e);\n        return new Uint8Array();\n      }\n    },\n\n    // ArrayBuffer -> Base64\n    arrayBufferToBase64(buffer) {\n      let binary = '';\n      const bytes = new Uint8Array(buffer);\n      const len = bytes.byteLength;\n      for (let i = 0; i < len; i++) {\n        binary += String.fromCharCode(bytes[i]);\n      }\n      return window.btoa(binary);\n    },\n\n    // 关键：播放16bit PCM裸数据，采样率16kHz，单声道\n    appendPCMBuffer(base64PCM) {\n      if (!this.audioContext || !this.audioPlaying) return;\n\n      const pcmBytes = this.decodeBase64(base64PCM);\n      const pcmSamples = new Int16Array(pcmBytes.buffer);\n\n      // 转为 Float32Array，范围[-1, 1]\n      const floatSamples = new Float32Array(pcmSamples.length);\n      for (let i = 0; i < pcmSamples.length; i++) {\n        floatSamples[i] = pcmSamples[i] / 32768;\n      }\n\n      // 创建AudioBuffer\n      const audioBuffer = this.audioContext.createBuffer(\n        1,                 // 单声道\n        floatSamples.length,\n        16000              // 采样率\n      );\n\n      audioBuffer.getChannelData(0).set(floatSamples);\n\n      // 播放音频\n      const source = this.audioContext.createBufferSource();\n      source.buffer = audioBuffer;\n      source.connect(this.audioContext.destination);\n      source.start();\n\n      // 记录source，方便停止\n      this.audioSources.push(source);\n\n      // 播放结束时自动清理\n      source.onended = () => {\n        this.audioSources = this.audioSources.filter(s => s !== source);\n      };\n    }\n  },\n\n  mounted() {\n    this.initAudioContext();\n    this.initWebSockets();\n  },\n\n  beforeDestroy() {\n    if (this.textSocket) this.textSocket.close();\n    if (this.audioSocket) this.audioSocket.close();\n    if (this.audioContext) this.audioContext.close();\n  }\n};\n</script>\n\n<style scoped>\ninput {\n  width: 300px;\n  padding: 8px;\n  margin-right: 10px;\n}\n\nbutton {\n  padding: 8px 16px;\n  margin: 5px;\n}\n</style>\n"],"mappings":";;;;;;;;;AAoBA;EACAA,KAAA;IACA;MACAC,WAAA;MACAC,YAAA;MACAC,YAAA;MACAC,SAAA;MAAA;MACAC,UAAA;MACAC,WAAA;MACAC,YAAA;MACAC,YAAA;IACA;EACA;EAEAC,OAAA;IACAC,gBAAA;MACA,UAAAT,WAAA,CAAAU,IAAA;MACA,KAAAN,UAAA,CAAAO,IAAA,MAAAX,WAAA;MACA,KAAAA,WAAA;IACA;IAEAY,iBAAA;MACA,KAAAV,YAAA;MACA,KAAAG,WAAA,CAAAM,IAAA;IACA;IAEAE,gBAAA;MACA,KAAAX,YAAA;MACA,KAAAG,WAAA,CAAAM,IAAA;MACA,KAAAG,YAAA;IACA;IAEAA,aAAA;MACA,KAAAP,YAAA,CAAAQ,OAAA,CAAAC,MAAA;QACA;UACAA,MAAA,CAAAC,IAAA;QACA,SAAAC,CAAA;UACAC,OAAA,CAAAC,IAAA,6BAAAF,CAAA;QACA;MACA;MACA,KAAAX,YAAA;IACA;IAEAc,sBAAA;MACA,KAAAjB,UAAA,CAAAkB,SAAA,GAAAC,KAAA;QACA,KAAAtB,YAAA,GAAAsB,KAAA,CAAAxB,IAAA;MACA;IACA;IAEAyB,uBAAA;MACA,KAAAnB,WAAA,CAAAiB,SAAA,GAAAC,KAAA;QACA;QACA,IAAAE,WAAA;QAEA,WAAAF,KAAA,CAAAxB,IAAA;UACA0B,WAAA,GAAAF,KAAA,CAAAxB,IAAA;UACA,KAAA2B,eAAA,CAAAD,WAAA;QACA,WAAAF,KAAA,CAAAxB,IAAA,YAAA4B,IAAA;UACA,MAAAC,MAAA,OAAAC,UAAA;UACAD,MAAA,CAAAE,SAAA;YACA,MAAAC,OAAA,GAAAH,MAAA,CAAAI,MAAA;YACA,MAAAC,MAAA,GAAAF,OAAA,CAAAG,KAAA;YACA,KAAAR,eAAA,CAAAO,MAAA;UACA;UACAL,MAAA,CAAAO,aAAA,CAAAZ,KAAA,CAAAxB,IAAA;QACA,WAAAwB,KAAA,CAAAxB,IAAA,YAAAqC,WAAA;UACAX,WAAA,QAAAY,mBAAA,CAAAd,KAAA,CAAAxB,IAAA;UACA,KAAA2B,eAAA,CAAAD,WAAA;QACA;UACAN,OAAA,CAAAmB,KAAA,aAAAf,KAAA,CAAAxB,IAAA;QACA;MACA;IACA;IAEAwC,eAAA;MACA,KAAAnC,UAAA,OAAAoC,SAAA,sDAAArC,SAAA;MACA,KAAAC,UAAA,CAAAqC,MAAA,cAAApB,qBAAA;MAEA,KAAAhB,WAAA,OAAAmC,SAAA,uDAAArC,SAAA;MACA,KAAAE,WAAA,CAAAoC,MAAA,cAAAjB,sBAAA;IACA;IAEAkB,iBAAA;MACA,KAAApC,YAAA,QAAAqC,MAAA,CAAAC,YAAA,IAAAD,MAAA,CAAAE,kBAAA;IACA;IAEA;IACAC,aAAAC,YAAA;MACA,MAAAC,aAAA,GAAAD,YAAA,CAAAE,OAAA;MACA;QACA,MAAAC,YAAA,GAAAC,IAAA,CAAAH,aAAA;QACA,MAAAI,SAAA,OAAAC,UAAA,CAAAH,YAAA,CAAAI,MAAA;QACA,SAAAC,CAAA,MAAAA,CAAA,GAAAL,YAAA,CAAAI,MAAA,EAAAC,CAAA;UACAH,SAAA,CAAAG,CAAA,IAAAL,YAAA,CAAAM,UAAA,CAAAD,CAAA;QACA;QACA,OAAAH,SAAA;MACA,SAAAlC,CAAA;QACAC,OAAA,CAAAmB,KAAA,iBAAApB,CAAA;QACA,WAAAmC,UAAA;MACA;IACA;IAEA;IACAhB,oBAAAoB,MAAA;MACA,IAAAC,MAAA;MACA,MAAAC,KAAA,OAAAN,UAAA,CAAAI,MAAA;MACA,MAAAG,GAAA,GAAAD,KAAA,CAAAE,UAAA;MACA,SAAAN,CAAA,MAAAA,CAAA,GAAAK,GAAA,EAAAL,CAAA;QACAG,MAAA,IAAAI,MAAA,CAAAC,YAAA,CAAAJ,KAAA,CAAAJ,CAAA;MACA;MACA,OAAAZ,MAAA,CAAAqB,IAAA,CAAAN,MAAA;IACA;IAEA;IACAhC,gBAAAuC,SAAA;MACA,UAAA3D,YAAA,UAAAJ,YAAA;MAEA,MAAAgE,QAAA,QAAApB,YAAA,CAAAmB,SAAA;MACA,MAAAE,UAAA,OAAAC,UAAA,CAAAF,QAAA,CAAAT,MAAA;;MAEA;MACA,MAAAY,YAAA,OAAAC,YAAA,CAAAH,UAAA,CAAAb,MAAA;MACA,SAAAC,CAAA,MAAAA,CAAA,GAAAY,UAAA,CAAAb,MAAA,EAAAC,CAAA;QACAc,YAAA,CAAAd,CAAA,IAAAY,UAAA,CAAAZ,CAAA;MACA;;MAEA;MACA,MAAAgB,WAAA,QAAAjE,YAAA,CAAAkE,YAAA,CACA;MAAA;MACAH,YAAA,CAAAf,MAAA,EACA;MACA;MAEAiB,WAAA,CAAAE,cAAA,IAAAC,GAAA,CAAAL,YAAA;;MAEA;MACA,MAAArD,MAAA,QAAAV,YAAA,CAAAqE,kBAAA;MACA3D,MAAA,CAAAyC,MAAA,GAAAc,WAAA;MACAvD,MAAA,CAAA4D,OAAA,MAAAtE,YAAA,CAAAuE,WAAA;MACA7D,MAAA,CAAA8D,KAAA;;MAEA;MACA,KAAAvE,YAAA,CAAAwE,IAAA,CAAA/D,MAAA;;MAEA;MACAA,MAAA,CAAAgE,OAAA;QACA,KAAAzE,YAAA,QAAAA,YAAA,CAAA0E,MAAA,CAAAC,CAAA,IAAAA,CAAA,KAAAlE,MAAA;MACA;IACA;EACA;EAEAmE,QAAA;IACA,KAAAzC,gBAAA;IACA,KAAAH,cAAA;EACA;EAEA6C,cAAA;IACA,SAAAhF,UAAA,OAAAA,UAAA,CAAAiF,KAAA;IACA,SAAAhF,WAAA,OAAAA,WAAA,CAAAgF,KAAA;IACA,SAAA/E,YAAA,OAAAA,YAAA,CAAA+E,KAAA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}