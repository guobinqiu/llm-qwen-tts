{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nexport default {\n  data() {\n    return {\n      text: '',\n      message: '',\n      messages: [],\n      sessionID: 'sess1',\n      wsText: null,\n      wsAudio: null,\n      audioCtx: null,\n      userInteracted: false,\n      audioQueue: [],\n      // 队列缓存音频块\n      isPlaying: false,\n      // 是否正在播放\n      sampleRate: 24000\n    };\n  },\n  computed: {\n    showMessages() {\n      const all = [...this.messages];\n      if (this.message.trim()) {\n        all.push({\n          role: 'assistant',\n          content: this.message\n        });\n      }\n      return all;\n    }\n  },\n  methods: {\n    sendText() {\n      if (!this.text.trim()) return;\n      if (!this.userInteracted) {\n        this.resumeAudioContext();\n        this.userInteracted = true;\n      }\n      this.wsText.send(this.text.trim());\n      this.messages.push({\n        role: 'user',\n        content: this.text.trim()\n      });\n      this.text = '';\n    },\n    resumeAudioContext() {\n      if (this.audioCtx && this.audioCtx.state === 'suspended') {\n        this.audioCtx.resume();\n      }\n    },\n    setupTextSocket() {\n      this.wsText = new WebSocket(`ws://localhost:8080/ws/text-stream?sessionid=${this.sessionID}`);\n      this.wsText.onopen = () => {\n        console.log('文本 WebSocket 已连接');\n      };\n      this.wsText.onmessage = event => {\n        const chunk = event.data;\n        this.message += chunk;\n        if (chunk === '\\n\\n') {\n          this.messages.push({\n            role: 'assistant',\n            content: this.message\n          });\n          this.message = '';\n        }\n      };\n      this.wsText.onerror = e => {\n        console.error('文本 WebSocket 错误', e);\n      };\n      this.wsText.onclose = () => {\n        console.log('文本 WebSocket 已关闭');\n      };\n    },\n    setupAudioSocket() {\n      this.audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n      this.wsAudio = new WebSocket(`ws://localhost:8080/ws/audio-stream?sessionid=${this.sessionID}`);\n      this.wsAudio.binaryType = 'arraybuffer';\n      this.wsAudio.onopen = () => {\n        console.log('音频 WebSocket 已连接');\n      };\n      this.wsAudio.onmessage = event => {\n        if (!this.userInteracted) {\n          this.resumeAudioContext();\n          this.userInteracted = true;\n        }\n        try {\n          const arrayBuffer = event.data;\n          const dataView = new DataView(arrayBuffer);\n          const length = arrayBuffer.byteLength / 2;\n          const float32Data = new Float32Array(length);\n          for (let i = 0; i < length; i++) {\n            const int16 = dataView.getInt16(i * 2, true);\n            float32Data[i] = int16 / 32768;\n          }\n\n          // 缓存音频块\n          this.audioQueue.push(float32Data);\n\n          // 如果未播放中，开始播放\n          if (!this.isPlaying) {\n            this.playAudioQueue();\n          }\n        } catch (err) {\n          console.error('播放音频数据失败:', err);\n        }\n      };\n      this.wsAudio.onerror = e => {\n        console.error('音频 WebSocket 错误', e);\n      };\n      this.wsAudio.onclose = () => {\n        console.log('音频 WebSocket 已关闭');\n        this.audioQueue = [];\n        this.isPlaying = false;\n      };\n    },\n    playAudioQueue() {\n      if (!this.audioQueue.length) {\n        this.isPlaying = false;\n        return;\n      }\n      this.isPlaying = true;\n      const float32Data = this.audioQueue.shift();\n      const audioBuffer = this.audioCtx.createBuffer(1, float32Data.length, this.sampleRate);\n      audioBuffer.getChannelData(0).set(float32Data);\n      const source = this.audioCtx.createBufferSource();\n      source.buffer = audioBuffer;\n      source.connect(this.audioCtx.destination);\n      source.onended = () => {\n        this.playAudioQueue();\n      };\n      source.start();\n    }\n  },\n  mounted() {\n    window.addEventListener('click', () => {\n      if (!this.userInteracted) {\n        this.resumeAudioContext();\n        this.userInteracted = true;\n      }\n    }, {\n      once: true\n    });\n    this.setupTextSocket();\n    this.setupAudioSocket();\n  },\n  beforeDestroy() {\n    if (this.wsText) this.wsText.close();\n    if (this.wsAudio) this.wsAudio.close();\n    this.audioQueue = [];\n    this.isPlaying = false;\n    if (this.audioCtx) this.audioCtx.close();\n  }\n};","map":{"version":3,"names":["data","text","message","messages","sessionID","wsText","wsAudio","audioCtx","userInteracted","audioQueue","isPlaying","sampleRate","computed","showMessages","all","trim","push","role","content","methods","sendText","resumeAudioContext","send","state","resume","setupTextSocket","WebSocket","onopen","console","log","onmessage","event","chunk","onerror","e","error","onclose","setupAudioSocket","window","AudioContext","webkitAudioContext","binaryType","arrayBuffer","dataView","DataView","length","byteLength","float32Data","Float32Array","i","int16","getInt16","playAudioQueue","err","shift","audioBuffer","createBuffer","getChannelData","set","source","createBufferSource","buffer","connect","destination","onended","start","mounted","addEventListener","once","beforeDestroy","close"],"sources":["src/components/ChatPage.vue"],"sourcesContent":["<template>\n  <div>\n    <div>\n      <input\n        v-model=\"text\"\n        placeholder=\"输入文本，回车发送\"\n        @keyup.enter=\"sendText\"\n        style=\"width: 300px; padding: 8px\"\n      />\n      <button @click=\"sendText\">发送</button>\n    </div>\n\n    <div style=\"margin-top: 20px;\">\n      <div v-for=\"(msg, index) in showMessages\" :key=\"index\">\n        <b>{{ msg.role }}:</b> {{ msg.content }}\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      text: '',\n      message: '',\n      messages: [],\n      sessionID: 'sess1',\n      wsText: null,\n      wsAudio: null,\n      audioCtx: null,\n      userInteracted: false,\n      audioQueue: [], // 队列缓存音频块\n      isPlaying: false, // 是否正在播放\n      sampleRate: 24000,\n    };\n  },\n  computed: {\n    showMessages() {\n      const all = [...this.messages];\n      if (this.message.trim()) {\n        all.push({ role: 'assistant', content: this.message });\n      }\n      return all;\n    }\n  },\n  methods: {\n    sendText() {\n      if (!this.text.trim()) return;\n\n      if (!this.userInteracted) {\n        this.resumeAudioContext();\n        this.userInteracted = true;\n      }\n\n      this.wsText.send(this.text.trim());\n      this.messages.push({ role: 'user', content: this.text.trim() });\n      this.text = '';\n    },\n    resumeAudioContext() {\n      if (this.audioCtx && this.audioCtx.state === 'suspended') {\n        this.audioCtx.resume();\n      }\n    },\n    setupTextSocket() {\n      this.wsText = new WebSocket(`ws://localhost:8080/ws/text-stream?sessionid=${this.sessionID}`);\n\n      this.wsText.onopen = () => {\n        console.log('文本 WebSocket 已连接');\n      };\n\n      this.wsText.onmessage = (event) => {\n        const chunk = event.data;\n        this.message += chunk;\n\n        if (chunk === '\\n\\n') {\n          this.messages.push({ role: 'assistant', content: this.message });\n          this.message = '';\n        }\n      };\n\n      this.wsText.onerror = (e) => {\n        console.error('文本 WebSocket 错误', e);\n      };\n\n      this.wsText.onclose = () => {\n        console.log('文本 WebSocket 已关闭');\n      };\n    },\n    setupAudioSocket() {\n      this.audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n\n      this.wsAudio = new WebSocket(`ws://localhost:8080/ws/audio-stream?sessionid=${this.sessionID}`);\n      this.wsAudio.binaryType = 'arraybuffer';\n\n      this.wsAudio.onopen = () => {\n        console.log('音频 WebSocket 已连接');\n      };\n\n      this.wsAudio.onmessage = (event) => {\n        if (!this.userInteracted) {\n          this.resumeAudioContext();\n          this.userInteracted = true;\n        }\n\n        try {\n          const arrayBuffer = event.data;\n          const dataView = new DataView(arrayBuffer);\n          const length = arrayBuffer.byteLength / 2;\n          const float32Data = new Float32Array(length);\n\n          for (let i = 0; i < length; i++) {\n            const int16 = dataView.getInt16(i * 2, true);\n            float32Data[i] = int16 / 32768;\n          }\n\n          // 缓存音频块\n          this.audioQueue.push(float32Data);\n\n          // 如果未播放中，开始播放\n          if (!this.isPlaying) {\n            this.playAudioQueue();\n          }\n\n        } catch (err) {\n          console.error('播放音频数据失败:', err);\n        }\n      };\n\n      this.wsAudio.onerror = (e) => {\n        console.error('音频 WebSocket 错误', e);\n      };\n\n      this.wsAudio.onclose = () => {\n        console.log('音频 WebSocket 已关闭');\n        this.audioQueue = [];\n        this.isPlaying = false;\n      };\n    },\n    playAudioQueue() {\n      if (!this.audioQueue.length) {\n        this.isPlaying = false;\n        return;\n      }\n      this.isPlaying = true;\n\n      const float32Data = this.audioQueue.shift();\n      const audioBuffer = this.audioCtx.createBuffer(1, float32Data.length, this.sampleRate);\n      audioBuffer.getChannelData(0).set(float32Data);\n\n      const source = this.audioCtx.createBufferSource();\n      source.buffer = audioBuffer;\n      source.connect(this.audioCtx.destination);\n\n      source.onended = () => {\n        this.playAudioQueue();\n      };\n\n      source.start();\n    }\n  },\n  mounted() {\n    window.addEventListener('click', () => {\n      if (!this.userInteracted) {\n        this.resumeAudioContext();\n        this.userInteracted = true;\n      }\n    }, { once: true });\n\n    this.setupTextSocket();\n    this.setupAudioSocket();\n  },\n  beforeDestroy() {\n    if (this.wsText) this.wsText.close();\n    if (this.wsAudio) this.wsAudio.close();\n    this.audioQueue = [];\n    this.isPlaying = false;\n    if (this.audioCtx) this.audioCtx.close();\n  }\n};\n</script>\n\n<style scoped>\ninput {\n  margin-right: 8px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}