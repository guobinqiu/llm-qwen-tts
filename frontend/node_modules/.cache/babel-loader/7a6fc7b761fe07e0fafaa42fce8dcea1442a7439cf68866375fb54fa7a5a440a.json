{"ast":null,"code":"import \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport \"core-js/modules/web.dom-exception.stack.js\";\nexport default {\n  data() {\n    return {\n      textMessage: '',\n      // 输入的文本消息\n      textResponse: '',\n      // 后端返回的文本响应\n      audioData: null,\n      // 音频数据（Base64 编码）\n      audioPlaying: false,\n      // 控制音频是否播放\n      sessionID: 'sess1',\n      // 假设的会话 ID\n      textSocket: null,\n      // 文本 WebSocket 连接\n      audioSocket: null,\n      // 音频 WebSocket 连接\n      audioContext: null // Web Audio API 音频上下文\n    };\n  },\n  methods: {\n    // 发送文本消息\n    sendTextMessage() {\n      if (this.textMessage.trim()) {\n        this.textSocket.send(this.textMessage);\n        this.textMessage = '';\n      }\n    },\n    // 启动音频流\n    startAudioStream() {\n      this.audioPlaying = true;\n      this.audioSocket.send('start'); // 通知后端开始音频流\n    },\n    // 停止音频流\n    stopAudioStream() {\n      this.audioPlaying = false;\n      this.audioSocket.send('stop'); // 通知后端停止音频流\n      this.audioData = null; // 停止音频播放\n    },\n    // 监听文本流响应\n    listenForTextResponse() {\n      this.textSocket.onmessage = event => {\n        this.textResponse = event.data;\n      };\n    },\n    // 监听音频流响应\n    listenForAudioResponse() {\n      this.audioSocket.onmessage = event => {\n        const audioBase64 = event.data; // Base64 编码的音频数据\n        this.appendAudioBuffer(audioBase64);\n      };\n    },\n    // 初始化 WebSocket 连接\n    initWebSockets() {\n      this.textSocket = new WebSocket(`ws://localhost:8080/ws/text-stream?sessionid=${this.sessionID}`);\n      this.textSocket.onopen = () => {\n        this.listenForTextResponse();\n      };\n      this.audioSocket = new WebSocket(`ws://localhost:8080/ws/audio-stream?sessionid=${this.sessionID}`);\n      this.audioSocket.onopen = () => {\n        this.listenForAudioResponse();\n      };\n    },\n    // 初始化 Web Audio API\n    initAudioContext() {\n      this.audioContext = new (window.AudioContext || window.webkitAudioContext)();\n    },\n    // 将 Base64 音频数据解码并播放\n    appendAudioBuffer(base64Audio) {\n      if (!this.audioContext) return;\n\n      // 解码 Base64 为二进制\n      const audioBytes = this.decodeBase64(base64Audio);\n\n      // 创建音频缓冲区\n      this.audioContext.decodeAudioData(audioBytes.buffer, buffer => {\n        // 创建源节点并连接到输出\n        const source = this.audioContext.createBufferSource();\n        source.buffer = buffer;\n        source.connect(this.audioContext.destination);\n        source.start();\n      });\n    },\n    // 解码 Base64 音频数据为二进制\n    decodeBase64(base64String) {\n      const binaryString = atob(base64String);\n      const byteArray = new Uint8Array(binaryString.length);\n      for (let i = 0; i < binaryString.length; i++) {\n        byteArray[i] = binaryString.charCodeAt(i);\n      }\n      return byteArray;\n    }\n  },\n  mounted() {\n    this.initAudioContext();\n    this.initWebSockets();\n  },\n  beforeDestroy() {\n    if (this.textSocket) {\n      this.textSocket.close();\n    }\n    if (this.audioSocket) {\n      this.audioSocket.close();\n    }\n    if (this.audioContext) {\n      this.audioContext.close();\n    }\n  }\n};","map":{"version":3,"names":["data","textMessage","textResponse","audioData","audioPlaying","sessionID","textSocket","audioSocket","audioContext","methods","sendTextMessage","trim","send","startAudioStream","stopAudioStream","listenForTextResponse","onmessage","event","listenForAudioResponse","audioBase64","appendAudioBuffer","initWebSockets","WebSocket","onopen","initAudioContext","window","AudioContext","webkitAudioContext","base64Audio","audioBytes","decodeBase64","decodeAudioData","buffer","source","createBufferSource","connect","destination","start","base64String","binaryString","atob","byteArray","Uint8Array","length","i","charCodeAt","mounted","beforeDestroy","close"],"sources":["src/components/ChatPage.vue"],"sourcesContent":["<template>\n  <div>\n    <!-- 输入文本消息 -->\n    <div>\n      <input v-model=\"textMessage\" @keyup.enter=\"sendTextMessage\" placeholder=\"输入消息...\" />\n      <button @click=\"sendTextMessage\">发送文本消息</button>\n    </div>\n\n    <!-- 显示文本消息 -->\n    <div v-if=\"textResponse\">\n      <h3>文本响应：</h3>\n      <p>{{ textResponse }}</p>\n    </div>\n\n    <!-- 控制音频流播放 -->\n    <div v-if=\"textResponse\">\n      <button @click=\"startAudioStream\" :disabled=\"audioPlaying\">播放音频</button>\n      <button @click=\"stopAudioStream\" :disabled=\"!audioPlaying\">停止音频</button>\n    </div>\n\n    <!-- 音频播放 -->\n    <div v-if=\"audioPlaying\">\n      <h3>音频响应：</h3>\n      <p>音频正在播放...</p>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      textMessage: '',        // 输入的文本消息\n      textResponse: '',       // 后端返回的文本响应\n      audioData: null,        // 音频数据（Base64 编码）\n      audioPlaying: false,    // 控制音频是否播放\n      sessionID: 'sess1',     // 假设的会话 ID\n      textSocket: null,       // 文本 WebSocket 连接\n      audioSocket: null,      // 音频 WebSocket 连接\n      audioContext: null,     // Web Audio API 音频上下文\n    };\n  },\n  methods: {\n    // 发送文本消息\n    sendTextMessage() {\n      if (this.textMessage.trim()) {\n        this.textSocket.send(this.textMessage);\n        this.textMessage = '';\n      }\n    },\n\n    // 启动音频流\n    startAudioStream() {\n      this.audioPlaying = true;\n      this.audioSocket.send('start');  // 通知后端开始音频流\n    },\n\n    // 停止音频流\n    stopAudioStream() {\n      this.audioPlaying = false;\n      this.audioSocket.send('stop');  // 通知后端停止音频流\n      this.audioData = null;  // 停止音频播放\n    },\n\n    // 监听文本流响应\n    listenForTextResponse() {\n      this.textSocket.onmessage = (event) => {\n        this.textResponse = event.data;\n      };\n    },\n\n    // 监听音频流响应\n    listenForAudioResponse() {\n      this.audioSocket.onmessage = (event) => {\n        const audioBase64 = event.data;  // Base64 编码的音频数据\n        this.appendAudioBuffer(audioBase64);\n      };\n    },\n\n    // 初始化 WebSocket 连接\n    initWebSockets() {\n      this.textSocket = new WebSocket(`ws://localhost:8080/ws/text-stream?sessionid=${this.sessionID}`);\n      this.textSocket.onopen = () => {\n        this.listenForTextResponse();\n      };\n\n      this.audioSocket = new WebSocket(`ws://localhost:8080/ws/audio-stream?sessionid=${this.sessionID}`);\n      this.audioSocket.onopen = () => {\n        this.listenForAudioResponse();\n      };\n    },\n\n    // 初始化 Web Audio API\n    initAudioContext() {\n      this.audioContext = new (window.AudioContext || window.webkitAudioContext)();\n    },\n\n    // 将 Base64 音频数据解码并播放\n    appendAudioBuffer(base64Audio) {\n      if (!this.audioContext) return;\n\n      // 解码 Base64 为二进制\n      const audioBytes = this.decodeBase64(base64Audio);\n\n      // 创建音频缓冲区\n      this.audioContext.decodeAudioData(audioBytes.buffer, (buffer) => {\n        // 创建源节点并连接到输出\n        const source = this.audioContext.createBufferSource();\n        source.buffer = buffer;\n        source.connect(this.audioContext.destination);\n        source.start();\n      });\n    },\n\n    // 解码 Base64 音频数据为二进制\n    decodeBase64(base64String) {\n      const binaryString = atob(base64String);\n      const byteArray = new Uint8Array(binaryString.length);\n      for (let i = 0; i < binaryString.length; i++) {\n        byteArray[i] = binaryString.charCodeAt(i);\n      }\n      return byteArray;\n    }\n  },\n\n  mounted() {\n    this.initAudioContext();\n    this.initWebSockets();\n  },\n\n  beforeDestroy() {\n    if (this.textSocket) {\n      this.textSocket.close();\n    }\n    if (this.audioSocket) {\n      this.audioSocket.close();\n    }\n    if (this.audioContext) {\n      this.audioContext.close();\n    }\n  }\n}\n</script>\n\n<style scoped>\nh1 {\n  text-align: center;\n}\n\nbutton {\n  margin: 10px;\n  padding: 10px 20px;\n}\n\ninput {\n  padding: 10px;\n  width: 300px;\n}\n\ndiv {\n  margin: 20px;\n}\n</style>\n"],"mappings":";;;;;AA6BA;EACAA,KAAA;IACA;MACAC,WAAA;MAAA;MACAC,YAAA;MAAA;MACAC,SAAA;MAAA;MACAC,YAAA;MAAA;MACAC,SAAA;MAAA;MACAC,UAAA;MAAA;MACAC,WAAA;MAAA;MACAC,YAAA;IACA;EACA;EACAC,OAAA;IACA;IACAC,gBAAA;MACA,SAAAT,WAAA,CAAAU,IAAA;QACA,KAAAL,UAAA,CAAAM,IAAA,MAAAX,WAAA;QACA,KAAAA,WAAA;MACA;IACA;IAEA;IACAY,iBAAA;MACA,KAAAT,YAAA;MACA,KAAAG,WAAA,CAAAK,IAAA;IACA;IAEA;IACAE,gBAAA;MACA,KAAAV,YAAA;MACA,KAAAG,WAAA,CAAAK,IAAA;MACA,KAAAT,SAAA;IACA;IAEA;IACAY,sBAAA;MACA,KAAAT,UAAA,CAAAU,SAAA,GAAAC,KAAA;QACA,KAAAf,YAAA,GAAAe,KAAA,CAAAjB,IAAA;MACA;IACA;IAEA;IACAkB,uBAAA;MACA,KAAAX,WAAA,CAAAS,SAAA,GAAAC,KAAA;QACA,MAAAE,WAAA,GAAAF,KAAA,CAAAjB,IAAA;QACA,KAAAoB,iBAAA,CAAAD,WAAA;MACA;IACA;IAEA;IACAE,eAAA;MACA,KAAAf,UAAA,OAAAgB,SAAA,sDAAAjB,SAAA;MACA,KAAAC,UAAA,CAAAiB,MAAA;QACA,KAAAR,qBAAA;MACA;MAEA,KAAAR,WAAA,OAAAe,SAAA,uDAAAjB,SAAA;MACA,KAAAE,WAAA,CAAAgB,MAAA;QACA,KAAAL,sBAAA;MACA;IACA;IAEA;IACAM,iBAAA;MACA,KAAAhB,YAAA,QAAAiB,MAAA,CAAAC,YAAA,IAAAD,MAAA,CAAAE,kBAAA;IACA;IAEA;IACAP,kBAAAQ,WAAA;MACA,UAAApB,YAAA;;MAEA;MACA,MAAAqB,UAAA,QAAAC,YAAA,CAAAF,WAAA;;MAEA;MACA,KAAApB,YAAA,CAAAuB,eAAA,CAAAF,UAAA,CAAAG,MAAA,EAAAA,MAAA;QACA;QACA,MAAAC,MAAA,QAAAzB,YAAA,CAAA0B,kBAAA;QACAD,MAAA,CAAAD,MAAA,GAAAA,MAAA;QACAC,MAAA,CAAAE,OAAA,MAAA3B,YAAA,CAAA4B,WAAA;QACAH,MAAA,CAAAI,KAAA;MACA;IACA;IAEA;IACAP,aAAAQ,YAAA;MACA,MAAAC,YAAA,GAAAC,IAAA,CAAAF,YAAA;MACA,MAAAG,SAAA,OAAAC,UAAA,CAAAH,YAAA,CAAAI,MAAA;MACA,SAAAC,CAAA,MAAAA,CAAA,GAAAL,YAAA,CAAAI,MAAA,EAAAC,CAAA;QACAH,SAAA,CAAAG,CAAA,IAAAL,YAAA,CAAAM,UAAA,CAAAD,CAAA;MACA;MACA,OAAAH,SAAA;IACA;EACA;EAEAK,QAAA;IACA,KAAAtB,gBAAA;IACA,KAAAH,cAAA;EACA;EAEA0B,cAAA;IACA,SAAAzC,UAAA;MACA,KAAAA,UAAA,CAAA0C,KAAA;IACA;IACA,SAAAzC,WAAA;MACA,KAAAA,WAAA,CAAAyC,KAAA;IACA;IACA,SAAAxC,YAAA;MACA,KAAAA,YAAA,CAAAwC,KAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}