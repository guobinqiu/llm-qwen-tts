{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      textMessage: '',\n      messages: [],\n      // 已完成的消息列表 [{role, content}]\n      currentAIChunk: '',\n      // AI当前流式输出的文本（未结束）\n      sessionID: 'sess1',\n      // 会话ID，按需改\n      textSocket: null,\n      audioSocket: null,\n      audioPlaying: false\n    };\n  },\n  computed: {\n    showMessages() {\n      // 显示所有已完成消息 + 当前流式AI回复（未结束）\n      if (this.currentAIChunk) {\n        return [...this.messages, {\n          role: 'assistant',\n          content: this.currentAIChunk\n        }];\n      }\n      return this.messages;\n    }\n  },\n  methods: {\n    sendTextMessage() {\n      if (!this.textMessage.trim()) return;\n      if (!this.textSocket || this.textSocket.readyState !== WebSocket.OPEN) {\n        alert('文本连接未建立');\n        return;\n      }\n      // 把用户消息加入消息列表\n      this.messages.push({\n        role: 'user',\n        content: this.textMessage.trim()\n      });\n      // 发送给后端\n      this.textSocket.send(this.textMessage.trim());\n      this.textMessage = '';\n      this.currentAIChunk = ''; // 清空当前AI回复缓存\n    },\n    initTextSocket() {\n      this.textSocket = new WebSocket(`ws://localhost:8080/ws/text-stream?sessionid=${this.sessionID}`);\n      this.textSocket.onopen = () => {\n        console.log('文本 WebSocket 已连接');\n      };\n      this.textSocket.onmessage = event => {\n        const data = event.data;\n        if (data === '\\n\\n') {\n          // AI回复结束，保存流式缓存\n          this.messages.push({\n            role: 'assistant',\n            content: this.currentAIChunk\n          });\n          this.currentAIChunk = '';\n        } else {\n          // 累加AI回复内容\n          this.currentAIChunk += data;\n        }\n      };\n      this.textSocket.onerror = e => {\n        console.error('文本 WebSocket 错误:', e);\n      };\n      this.textSocket.onclose = () => {\n        console.log('文本 WebSocket 已关闭');\n      };\n    },\n    initAudioSocket() {\n      this.audioSocket = new WebSocket(`ws://localhost:8080/ws/audio-stream?sessionid=${this.sessionID}`);\n      this.audioSocket.onopen = () => {\n        console.log('音频 WebSocket 已连接');\n      };\n      this.audioSocket.onerror = e => {\n        console.error('音频 WebSocket 错误:', e);\n      };\n      this.audioSocket.onclose = () => {\n        console.log('音频 WebSocket 已关闭');\n      };\n      this.audioSocket.onmessage = event => {\n        // 这里你可以接收二进制音频数据，然后通过 MediaSource API 播放\n        // 或者暂存音频块，播放逻辑根据具体需求实现\n        console.log('收到音频数据块，字节长度:', event.data.byteLength || event.data.length);\n      };\n    },\n    startAudioStream() {\n      if (!this.audioSocket || this.audioSocket.readyState !== WebSocket.OPEN) {\n        alert('音频连接未建立');\n        return;\n      }\n      this.audioPlaying = true;\n      this.audioSocket.send('start');\n    },\n    stopAudioStream() {\n      if (!this.audioSocket || this.audioSocket.readyState !== WebSocket.OPEN) {\n        alert('音频连接未建立');\n        return;\n      }\n      this.audioPlaying = false;\n      this.audioSocket.send('stop');\n    }\n  },\n  mounted() {\n    this.initTextSocket();\n    this.initAudioSocket();\n  },\n  beforeDestroy() {\n    if (this.textSocket) this.textSocket.close();\n    if (this.audioSocket) this.audioSocket.close();\n  }\n};","map":{"version":3,"names":["data","textMessage","messages","currentAIChunk","sessionID","textSocket","audioSocket","audioPlaying","computed","showMessages","role","content","methods","sendTextMessage","trim","readyState","WebSocket","OPEN","alert","push","send","initTextSocket","onopen","console","log","onmessage","event","onerror","e","error","onclose","initAudioSocket","byteLength","length","startAudioStream","stopAudioStream","mounted","beforeDestroy","close"],"sources":["src/components/ChatPage.vue"],"sourcesContent":["<template>\n  <div id=\"chat\">\n    <div style=\"margin-bottom: 10px;\">\n      <input\n        v-model=\"textMessage\"\n        @keyup.enter=\"sendTextMessage\"\n        placeholder=\"输入消息后回车或点击发送\"\n        style=\"width: 300px; padding: 6px;\"\n      />\n      <button @click=\"sendTextMessage\">发送</button>\n    </div>\n\n    <div style=\"max-height: 400px; overflow-y: auto; border: 1px solid #ccc; padding: 10px;\">\n      <div v-for=\"(msg, idx) in showMessages\" :key=\"idx\" :style=\"{ color: msg.role === 'user' ? 'blue' : 'black', marginBottom: '8px' }\">\n        <b>{{ msg.role }}:</b> {{ msg.content }}\n      </div>\n    </div>\n\n    <div style=\"margin-top: 20px;\">\n      <button @click=\"startAudioStream\" :disabled=\"audioPlaying\">播放音频</button>\n      <button @click=\"stopAudioStream\" :disabled=\"!audioPlaying\">停止音频</button>\n    </div>\n\n    <!-- 这里你可以放一个 <audio> 标签，用 MediaSource API 播放音频流 -->\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      textMessage: '',\n      messages: [],         // 已完成的消息列表 [{role, content}]\n      currentAIChunk: '',   // AI当前流式输出的文本（未结束）\n      sessionID: 'sess1',   // 会话ID，按需改\n      textSocket: null,\n      audioSocket: null,\n      audioPlaying: false,\n    };\n  },\n  computed: {\n    showMessages() {\n      // 显示所有已完成消息 + 当前流式AI回复（未结束）\n      if (this.currentAIChunk) {\n        return [...this.messages, { role: 'assistant', content: this.currentAIChunk }];\n      }\n      return this.messages;\n    }\n  },\n  methods: {\n    sendTextMessage() {\n      if (!this.textMessage.trim()) return;\n      if (!this.textSocket || this.textSocket.readyState !== WebSocket.OPEN) {\n        alert('文本连接未建立');\n        return;\n      }\n      // 把用户消息加入消息列表\n      this.messages.push({ role: 'user', content: this.textMessage.trim() });\n      // 发送给后端\n      this.textSocket.send(this.textMessage.trim());\n      this.textMessage = '';\n      this.currentAIChunk = ''; // 清空当前AI回复缓存\n    },\n\n    initTextSocket() {\n      this.textSocket = new WebSocket(`ws://localhost:8080/ws/text-stream?sessionid=${this.sessionID}`);\n\n      this.textSocket.onopen = () => {\n        console.log('文本 WebSocket 已连接');\n      };\n\n      this.textSocket.onmessage = (event) => {\n        const data = event.data;\n        if (data === '\\n\\n') {\n          // AI回复结束，保存流式缓存\n          this.messages.push({ role: 'assistant', content: this.currentAIChunk });\n          this.currentAIChunk = '';\n        } else {\n          // 累加AI回复内容\n          this.currentAIChunk += data;\n        }\n      };\n\n      this.textSocket.onerror = (e) => {\n        console.error('文本 WebSocket 错误:', e);\n      };\n\n      this.textSocket.onclose = () => {\n        console.log('文本 WebSocket 已关闭');\n      };\n    },\n\n    initAudioSocket() {\n      this.audioSocket = new WebSocket(`ws://localhost:8080/ws/audio-stream?sessionid=${this.sessionID}`);\n\n      this.audioSocket.onopen = () => {\n        console.log('音频 WebSocket 已连接');\n      };\n\n      this.audioSocket.onerror = (e) => {\n        console.error('音频 WebSocket 错误:', e);\n      };\n\n      this.audioSocket.onclose = () => {\n        console.log('音频 WebSocket 已关闭');\n      };\n\n      this.audioSocket.onmessage = (event) => {\n        // 这里你可以接收二进制音频数据，然后通过 MediaSource API 播放\n        // 或者暂存音频块，播放逻辑根据具体需求实现\n        console.log('收到音频数据块，字节长度:', event.data.byteLength || event.data.length);\n      };\n    },\n\n    startAudioStream() {\n      if (!this.audioSocket || this.audioSocket.readyState !== WebSocket.OPEN) {\n        alert('音频连接未建立');\n        return;\n      }\n      this.audioPlaying = true;\n      this.audioSocket.send('start');\n    },\n\n    stopAudioStream() {\n      if (!this.audioSocket || this.audioSocket.readyState !== WebSocket.OPEN) {\n        alert('音频连接未建立');\n        return;\n      }\n      this.audioPlaying = false;\n      this.audioSocket.send('stop');\n    }\n  },\n  mounted() {\n    this.initTextSocket();\n    this.initAudioSocket();\n  },\n  beforeDestroy() {\n    if (this.textSocket) this.textSocket.close();\n    if (this.audioSocket) this.audioSocket.close();\n  }\n};\n</script>\n\n<style scoped>\n#chat {\n  max-width: 600px;\n  margin: 20px auto;\n  font-family: Arial, sans-serif;\n}\n\nbutton {\n  padding: 6px 12px;\n  margin-right: 8px;\n  cursor: pointer;\n}\n</style>\n"],"mappings":";AA4BA;EACAA,KAAA;IACA;MACAC,WAAA;MACAC,QAAA;MAAA;MACAC,cAAA;MAAA;MACAC,SAAA;MAAA;MACAC,UAAA;MACAC,WAAA;MACAC,YAAA;IACA;EACA;EACAC,QAAA;IACAC,aAAA;MACA;MACA,SAAAN,cAAA;QACA,gBAAAD,QAAA;UAAAQ,IAAA;UAAAC,OAAA,OAAAR;QAAA;MACA;MACA,YAAAD,QAAA;IACA;EACA;EACAU,OAAA;IACAC,gBAAA;MACA,UAAAZ,WAAA,CAAAa,IAAA;MACA,UAAAT,UAAA,SAAAA,UAAA,CAAAU,UAAA,KAAAC,SAAA,CAAAC,IAAA;QACAC,KAAA;QACA;MACA;MACA;MACA,KAAAhB,QAAA,CAAAiB,IAAA;QAAAT,IAAA;QAAAC,OAAA,OAAAV,WAAA,CAAAa,IAAA;MAAA;MACA;MACA,KAAAT,UAAA,CAAAe,IAAA,MAAAnB,WAAA,CAAAa,IAAA;MACA,KAAAb,WAAA;MACA,KAAAE,cAAA;IACA;IAEAkB,eAAA;MACA,KAAAhB,UAAA,OAAAW,SAAA,sDAAAZ,SAAA;MAEA,KAAAC,UAAA,CAAAiB,MAAA;QACAC,OAAA,CAAAC,GAAA;MACA;MAEA,KAAAnB,UAAA,CAAAoB,SAAA,GAAAC,KAAA;QACA,MAAA1B,IAAA,GAAA0B,KAAA,CAAA1B,IAAA;QACA,IAAAA,IAAA;UACA;UACA,KAAAE,QAAA,CAAAiB,IAAA;YAAAT,IAAA;YAAAC,OAAA,OAAAR;UAAA;UACA,KAAAA,cAAA;QACA;UACA;UACA,KAAAA,cAAA,IAAAH,IAAA;QACA;MACA;MAEA,KAAAK,UAAA,CAAAsB,OAAA,GAAAC,CAAA;QACAL,OAAA,CAAAM,KAAA,qBAAAD,CAAA;MACA;MAEA,KAAAvB,UAAA,CAAAyB,OAAA;QACAP,OAAA,CAAAC,GAAA;MACA;IACA;IAEAO,gBAAA;MACA,KAAAzB,WAAA,OAAAU,SAAA,uDAAAZ,SAAA;MAEA,KAAAE,WAAA,CAAAgB,MAAA;QACAC,OAAA,CAAAC,GAAA;MACA;MAEA,KAAAlB,WAAA,CAAAqB,OAAA,GAAAC,CAAA;QACAL,OAAA,CAAAM,KAAA,qBAAAD,CAAA;MACA;MAEA,KAAAtB,WAAA,CAAAwB,OAAA;QACAP,OAAA,CAAAC,GAAA;MACA;MAEA,KAAAlB,WAAA,CAAAmB,SAAA,GAAAC,KAAA;QACA;QACA;QACAH,OAAA,CAAAC,GAAA,kBAAAE,KAAA,CAAA1B,IAAA,CAAAgC,UAAA,IAAAN,KAAA,CAAA1B,IAAA,CAAAiC,MAAA;MACA;IACA;IAEAC,iBAAA;MACA,UAAA5B,WAAA,SAAAA,WAAA,CAAAS,UAAA,KAAAC,SAAA,CAAAC,IAAA;QACAC,KAAA;QACA;MACA;MACA,KAAAX,YAAA;MACA,KAAAD,WAAA,CAAAc,IAAA;IACA;IAEAe,gBAAA;MACA,UAAA7B,WAAA,SAAAA,WAAA,CAAAS,UAAA,KAAAC,SAAA,CAAAC,IAAA;QACAC,KAAA;QACA;MACA;MACA,KAAAX,YAAA;MACA,KAAAD,WAAA,CAAAc,IAAA;IACA;EACA;EACAgB,QAAA;IACA,KAAAf,cAAA;IACA,KAAAU,eAAA;EACA;EACAM,cAAA;IACA,SAAAhC,UAAA,OAAAA,UAAA,CAAAiC,KAAA;IACA,SAAAhC,WAAA,OAAAA,WAAA,CAAAgC,KAAA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}